/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client.View;

import Client.View.ComboBoxHelper.ComboItem;
import Client.View.Verifier.*;
import Server.Controller.IntegrationRequest;
import Server.Model.Customer;
import Server.Model.IEntity;
import Server.Model.Reception;
import Server.Model.Reservation;
import Server.Model.Room;
import com.fasterxml.jackson.core.JsonProcessingException;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelHandlerContext;
import io.netty.util.CharsetUtil;
import java.awt.CardLayout;
import java.awt.Component;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Locale;
import javax.swing.*;
import javax.swing.plaf.basic.BasicButtonUI;
import javax.swing.table.DefaultTableModel;

/**
 * @author Kseniia Bashkova
 */
public class Home extends BasicView {

    private ChannelHandlerContext channelHandlerContext;
    private CardLayout cardLayout;
    private CardLayout cardLayoutRoom;
    private CardLayout cardLayoutCustomer;
    private CardLayout cardLayoutReception;
    private CardLayout cardLayoutReservation;


    public Home(ChannelHandlerContext channelHandlerContext) {

        super();
        initComponents();
        this.channelHandlerContext = channelHandlerContext;
        setVisible(true);
        Component[] components = this.getContentPane().getComponents();

        for (Component component : components) {
            if (component instanceof JButton) {
                ((JButton) component).setUI(new BasicButtonUI());
                ((JButton) component).setFocusPainted(false);
            }
        }
        
       

        cardLayout = (CardLayout) (mainCards.getLayout());
        cardLayoutRoom = (CardLayout) (roomCards.getLayout());
        cardLayoutCustomer = (CardLayout) (customerCards.getLayout());
        cardLayoutReception = (CardLayout) (receptionCards.getLayout());
        cardLayoutReservation = (CardLayout) (reservationCards.getLayout());
        
    }


    private Home() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jSplitPane1 = new javax.swing.JSplitPane();
        Menu = new javax.swing.JPanel();
        roomManagerButton = new javax.swing.JButton();
        reservationManagerButton = new javax.swing.JButton();
        receptionManagerButton = new javax.swing.JButton();
        customerManagerButton1 = new javax.swing.JButton();
        mainCards = new javax.swing.JPanel();
        roomCard = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        RoomPanel = new javax.swing.JPanel();
        ShowRoomsMenuButton = new javax.swing.JButton();
        CreateRoomMenuButton = new javax.swing.JButton();
        UpdateRoomMenuButton = new javax.swing.JButton();
        DeleteRoomMenuButton = new javax.swing.JButton();
        roomCards = new javax.swing.JPanel();
        showRoomCard = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableRooms = new javax.swing.JTable();
        jLabel86 = new javax.swing.JLabel();
        createRoomCard = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        isVIPCheckBoxCreateRoom = new javax.swing.JCheckBox();
        roomNumberCreateRoom = new javax.swing.JTextField();
        priceCreateRoom = new javax.swing.JTextField();
        capacityCreateRoom = new javax.swing.JTextField();
        descriptionCreateRoom = new javax.swing.JTextField();
        createRoomButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        updateRoomCard = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        isVIPCheckBoxUpdateRoom = new javax.swing.JCheckBox();
        roomNumberUpdateRoom = new javax.swing.JTextField();
        priceUpdateRoom = new javax.swing.JTextField();
        capacityUpdateRoom = new javax.swing.JTextField();
        descriptionUpdateRoom = new javax.swing.JTextField();
        updateRoomButton = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jComboBoxRoomUpdate = new javax.swing.JComboBox<>();
        deleteRoomCard = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        isVIPCheckBoxDeleteRoom = new javax.swing.JCheckBox();
        roomNumberDeleteRoom = new javax.swing.JTextField();
        priceDeleteRoom = new javax.swing.JTextField();
        capacityDeleteRoom = new javax.swing.JTextField();
        descriptionDeleteRoom = new javax.swing.JTextField();
        deleteRoomButton = new javax.swing.JButton();
        jLabel37 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jComboBoxRoomDelete = new javax.swing.JComboBox<>();
        customerCard = new javax.swing.JPanel();
        jSplitPane3 = new javax.swing.JSplitPane();
        CustomerPanel = new javax.swing.JPanel();
        CreateCustomerMenuButton = new javax.swing.JButton();
        ShowCustomersMenuButton = new javax.swing.JButton();
        UpdateCustomerMenuButton = new javax.swing.JButton();
        DeleteCustomerMenuButton = new javax.swing.JButton();
        customerCards = new javax.swing.JPanel();
        createCustomerCard = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        firstNameCreateCustomer = new javax.swing.JTextField();
        secondNameCreateCustomer = new javax.swing.JTextField();
        passportCreateCustomer = new javax.swing.JTextField();
        birthDayCreateCustomer = new javax.swing.JTextField();
        createCustomerButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        phoneCreateCustomer = new javax.swing.JTextField();
        emailCreateCustomer = new javax.swing.JTextField();
        jDateChooserCustomerBithdayCreateCutomer = new com.toedter.calendar.JDateChooser();
        showCustomerCard = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableCustomers = new javax.swing.JTable();
        jLabel87 = new javax.swing.JLabel();
        updateCustomerCard = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        firstNameUpdateCustomer = new javax.swing.JTextField();
        secondNameUpdateCustomer = new javax.swing.JTextField();
        passportUpdateCustomer = new javax.swing.JTextField();
        birthDayUpdateCustomer = new javax.swing.JTextField();
        updateCustomerButton = new javax.swing.JButton();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        phoneUpdateCustomer = new javax.swing.JTextField();
        emailUpdateCustomer = new javax.swing.JTextField();
        jComboBoxCustomerUpdateCustomer = new javax.swing.JComboBox<>();
        jLabel38 = new javax.swing.JLabel();
        deleteCustomerCard = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        firstNameDeleteCustomer = new javax.swing.JTextField();
        secondNameDeleteCustomer = new javax.swing.JTextField();
        passportDeleteCustomer = new javax.swing.JTextField();
        birthDayDeleteCustomer = new javax.swing.JTextField();
        deleteCustomerButton = new javax.swing.JButton();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        phoneDeleteCustomer = new javax.swing.JTextField();
        emailDeleteCustomer = new javax.swing.JTextField();
        jComboBoxCustomerDeleteCustomer = new javax.swing.JComboBox<>();
        jLabel84 = new javax.swing.JLabel();
        reservationCard = new javax.swing.JPanel();
        jSplitPane4 = new javax.swing.JSplitPane();
        ReservationPanel = new javax.swing.JPanel();
        CreateReservationMenuButton = new javax.swing.JButton();
        ShowReservationsMenuButton = new javax.swing.JButton();
        UpdateReservationMenuButton = new javax.swing.JButton();
        DeleteReservationMenuButton = new javax.swing.JButton();
        reservationCards = new javax.swing.JPanel();
        createReservationCard = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        chechInCreateReservation = new javax.swing.JTextField();
        chechOutCreateReservation = new javax.swing.JTextField();
        createReservationButton = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jComboBoxSelectCustomer = new javax.swing.JComboBox<>();
        jComboBoxReservationCreateRoom = new javax.swing.JComboBox<>();
        jButtonGetPossibleRooms = new javax.swing.JButton();
        showReservationCard = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableReservation = new javax.swing.JTable();
        jLabel88 = new javax.swing.JLabel();
        updateReservationCard = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jLabel62 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        checkInUpdateReservation = new javax.swing.JTextField();
        checkOutUpdateReservation = new javax.swing.JTextField();
        updateReservationButton = new javax.swing.JButton();
        jLabel76 = new javax.swing.JLabel();
        chooserCheckInUpdateReservation = new com.toedter.calendar.JDateChooser();
        chooserCheckOutUpdateReservation = new com.toedter.calendar.JDateChooser();
        jComboBoxSelectRoomUpdateReservation = new javax.swing.JComboBox<>();
        jCustomerUpdateText = new javax.swing.JTextField();
        jComboBoxReservationUpdateCustomer = new javax.swing.JComboBox<>();
        jLabel77 = new javax.swing.JLabel();
        jLabel64 = new javax.swing.JLabel();
        jComboxReservationIdUpdateReservation = new javax.swing.JComboBox<>();
        jLabel58 = new javax.swing.JLabel();
        deleteReservationCard = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jLabel79 = new javax.swing.JLabel();
        jLabel80 = new javax.swing.JLabel();
        jLabel81 = new javax.swing.JLabel();
        jLabel82 = new javax.swing.JLabel();
        checkInDeleteReservation = new javax.swing.JTextField();
        checkOutDeleteReservation = new javax.swing.JTextField();
        deleteReservationButton = new javax.swing.JButton();
        jLabel83 = new javax.swing.JLabel();
        jComboBoxReservationDelete = new javax.swing.JComboBox<>();
        jLabel39 = new javax.swing.JLabel();
        jTextReservationDeleteCustomerId = new javax.swing.JTextField();
        jTextReservationDeleteRoomId = new javax.swing.JTextField();
        jLabel85 = new javax.swing.JLabel();
        jComboBoxSelectCustomerDeleteReservation = new javax.swing.JComboBox<>();
        receptionCard = new javax.swing.JPanel();
        jSplitPane5 = new javax.swing.JSplitPane();
        ReceptionPanel = new javax.swing.JPanel();
        CreateReceptionistMenuButton = new javax.swing.JButton();
        ShowReceptionistMenuButton = new javax.swing.JButton();
        UpdateReceptionistMenuButton = new javax.swing.JButton();
        DeleteReceptionistMenuButton = new javax.swing.JButton();
        receptionCards = new javax.swing.JPanel();
        createReceptionistCard = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        firstNameCreateReceptionist = new javax.swing.JTextField();
        secondNameCreateReceptionist = new javax.swing.JTextField();
        passportCreateReceptionist = new javax.swing.JTextField();
        birthDayCreateReceptionist = new javax.swing.JTextField();
        createReceptionistButton = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        phoneCreateReceptionist = new javax.swing.JTextField();
        emailCreateReceptionist = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        addressCreateReceptionist = new javax.swing.JTextField();
        jDateChooserBirthDayReceptionistCreateReceptionist = new com.toedter.calendar.JDateChooser();
        showReceptionistCard = new javax.swing.JPanel();
        jLabel89 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableReceptions = new javax.swing.JTable();
        updateReceptionistCard = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        firstNameUpdateReceptionist = new javax.swing.JTextField();
        secondNameUpdateReceptionist = new javax.swing.JTextField();
        passportUpdateReceptionist = new javax.swing.JTextField();
        birthDayUpdateReceptionist = new javax.swing.JTextField();
        updateReceptionistButton = new javax.swing.JButton();
        jLabel66 = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        phoneUpdateReceptionist = new javax.swing.JTextField();
        emailUpdateReceptionist = new javax.swing.JTextField();
        jLabel69 = new javax.swing.JLabel();
        addressUpdateReceptionist = new javax.swing.JTextField();
        jComboBoxRecepcionistUpdate = new javax.swing.JComboBox<>();
        jLabel78 = new javax.swing.JLabel();
        deleteReceptionistCard = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jLabel59 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabel70 = new javax.swing.JLabel();
        firstNameDeleteReceptionist = new javax.swing.JTextField();
        secondNameDeleteReceptionist = new javax.swing.JTextField();
        passportDeleteReceptionist = new javax.swing.JTextField();
        birthDayDeleteReceptionist = new javax.swing.JTextField();
        deleteReceptionistButton = new javax.swing.JButton();
        jLabel71 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        jLabel73 = new javax.swing.JLabel();
        phoneDeleteReceptionist = new javax.swing.JTextField();
        emailDeleteReceptionist = new javax.swing.JTextField();
        jLabel74 = new javax.swing.JLabel();
        addressDeleteReceptionist = new javax.swing.JTextField();
        jComboBoxReceptionDelete = new javax.swing.JComboBox<>();
        jLabel40 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(0, 0));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Menu.setBackground(new java.awt.Color(0, 0, 0));

        roomManagerButton.setBackground(new java.awt.Color(0, 0, 0));
        roomManagerButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        roomManagerButton.setForeground(new java.awt.Color(255, 255, 255));
        roomManagerButton.setText("Room Manager");
        roomManagerButton.setBorder(null);
        roomManagerButton.setBorderPainted(false);
        roomManagerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomManagerButtonActionPerformed(evt);
            }
        });

        reservationManagerButton.setBackground(new java.awt.Color(0, 0, 0));
        reservationManagerButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        reservationManagerButton.setForeground(new java.awt.Color(255, 255, 255));
        reservationManagerButton.setText("Reservation Manager");
        reservationManagerButton.setBorderPainted(false);
        reservationManagerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservationManagerButtonActionPerformed(evt);
            }
        });

        receptionManagerButton.setBackground(new java.awt.Color(0, 0, 0));
        receptionManagerButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        receptionManagerButton.setForeground(new java.awt.Color(255, 255, 255));
        receptionManagerButton.setText("Reception Manager");
        receptionManagerButton.setBorderPainted(false);
        receptionManagerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receptionManagerButtonActionPerformed(evt);
            }
        });

        customerManagerButton1.setBackground(new java.awt.Color(0, 0, 0));
        customerManagerButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        customerManagerButton1.setForeground(new java.awt.Color(255, 255, 255));
        customerManagerButton1.setText("Customer Manager");
        customerManagerButton1.setBorderPainted(false);
        customerManagerButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerManagerButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MenuLayout = new javax.swing.GroupLayout(Menu);
        Menu.setLayout(MenuLayout);
        MenuLayout.setHorizontalGroup(
            MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(roomManagerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(customerManagerButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(reservationManagerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(receptionManagerButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        MenuLayout.setVerticalGroup(
            MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuLayout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addComponent(roomManagerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(customerManagerButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reservationManagerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(receptionManagerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(162, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(Menu);

        mainCards.setLayout(new java.awt.CardLayout());

        roomCard.setBackground(new java.awt.Color(153, 177, 148));

        RoomPanel.setBackground(new java.awt.Color(0, 153, 51));

        ShowRoomsMenuButton.setBackground(new java.awt.Color(0, 153, 51));
        ShowRoomsMenuButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ShowRoomsMenuButton.setForeground(new java.awt.Color(255, 255, 255));
        ShowRoomsMenuButton.setText("Show Rooms");
        ShowRoomsMenuButton.setToolTipText("");
        ShowRoomsMenuButton.setBorderPainted(false);
        ShowRoomsMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowRoomsMenuButtonActionPerformed(evt);
            }
        });

        CreateRoomMenuButton.setBackground(new java.awt.Color(0, 153, 51));
        CreateRoomMenuButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        CreateRoomMenuButton.setForeground(new java.awt.Color(255, 255, 255));
        CreateRoomMenuButton.setText("Create Room");
        CreateRoomMenuButton.setBorderPainted(false);
        CreateRoomMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateRoomMenuButtonActionPerformed(evt);
            }
        });

        UpdateRoomMenuButton.setBackground(new java.awt.Color(0, 153, 51));
        UpdateRoomMenuButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        UpdateRoomMenuButton.setForeground(new java.awt.Color(255, 255, 255));
        UpdateRoomMenuButton.setText("Update Room");
        UpdateRoomMenuButton.setBorderPainted(false);
        UpdateRoomMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateRoomMenuButtonActionPerformed(evt);
            }
        });

        DeleteRoomMenuButton.setBackground(new java.awt.Color(0, 153, 51));
        DeleteRoomMenuButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        DeleteRoomMenuButton.setForeground(new java.awt.Color(255, 255, 255));
        DeleteRoomMenuButton.setText("Delete Room");
        DeleteRoomMenuButton.setBorderPainted(false);
        DeleteRoomMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteRoomMenuButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout RoomPanelLayout = new javax.swing.GroupLayout(RoomPanel);
        RoomPanel.setLayout(RoomPanelLayout);
        RoomPanelLayout.setHorizontalGroup(
            RoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(RoomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UpdateRoomMenuButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RoomPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(DeleteRoomMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(RoomPanelLayout.createSequentialGroup()
                        .addGroup(RoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ShowRoomsMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CreateRoomMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        RoomPanelLayout.setVerticalGroup(
            RoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RoomPanelLayout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addComponent(CreateRoomMenuButton)
                .addGap(18, 18, 18)
                .addComponent(ShowRoomsMenuButton)
                .addGap(18, 18, 18)
                .addComponent(UpdateRoomMenuButton)
                .addGap(18, 18, 18)
                .addComponent(DeleteRoomMenuButton)
                .addContainerGap(191, Short.MAX_VALUE))
        );

        jSplitPane2.setLeftComponent(RoomPanel);

        roomCards.setLayout(new java.awt.CardLayout());

        showRoomCard.setBackground(new java.awt.Color(102, 255, 102));

        jTableRooms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTableRooms);

        jLabel86.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel86.setText("Rooms");

        javax.swing.GroupLayout showRoomCardLayout = new javax.swing.GroupLayout(showRoomCard);
        showRoomCard.setLayout(showRoomCardLayout);
        showRoomCardLayout.setHorizontalGroup(
            showRoomCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showRoomCardLayout.createSequentialGroup()
                .addContainerGap(130, Short.MAX_VALUE)
                .addGroup(showRoomCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, showRoomCardLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(97, 97, 97))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, showRoomCardLayout.createSequentialGroup()
                        .addComponent(jLabel86)
                        .addGap(288, 288, 288))))
        );
        showRoomCardLayout.setVerticalGroup(
            showRoomCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showRoomCardLayout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(jLabel86)
                .addGap(41, 41, 41)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        roomCards.add(showRoomCard, "showRoomCard");

        createRoomCard.setBackground(new java.awt.Color(75, 182, 101));

        jPanel1.setBackground(new java.awt.Color(102, 255, 102));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Room number");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Price");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Capacity");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Description");

        isVIPCheckBoxCreateRoom.setBackground(new java.awt.Color(102, 255, 102));
        isVIPCheckBoxCreateRoom.setText("VIP");
        isVIPCheckBoxCreateRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isVIPCheckBoxCreateRoomActionPerformed(evt);
            }
        });

        roomNumberCreateRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomNumberCreateRoomActionPerformed(evt);
            }
        });

        createRoomButton.setText("Create");
        createRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRoomButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("CREATE NEW ROOM");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(230, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(203, 203, 203))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(capacityCreateRoom, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                    .addComponent(jLabel1)
                                    .addComponent(roomNumberCreateRoom)
                                    .addComponent(jLabel3))
                                .addGap(61, 61, 61)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(priceCreateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(isVIPCheckBoxCreateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(descriptionCreateRoom)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(238, 238, 238)
                        .addComponent(createRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomNumberCreateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceCreateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(capacityCreateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(isVIPCheckBoxCreateRoom))
                .addGap(30, 30, 30)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(descriptionCreateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(createRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(101, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout createRoomCardLayout = new javax.swing.GroupLayout(createRoomCard);
        createRoomCard.setLayout(createRoomCardLayout);
        createRoomCardLayout.setHorizontalGroup(
            createRoomCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createRoomCardLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 27, Short.MAX_VALUE))
        );
        createRoomCardLayout.setVerticalGroup(
            createRoomCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        roomCards.add(createRoomCard, "createRoomCard");

        updateRoomCard.setBackground(new java.awt.Color(70, 129, 84));

        jPanel6.setBackground(new java.awt.Color(102, 255, 102));

        jLabel27.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel27.setText("Room number");

        jLabel28.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel28.setText("Price");

        jLabel29.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel29.setText("Capacity");

        jLabel30.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel30.setText("Description");

        isVIPCheckBoxUpdateRoom.setBackground(new java.awt.Color(102, 255, 102));
        isVIPCheckBoxUpdateRoom.setText("VIP");
        isVIPCheckBoxUpdateRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isVIPCheckBoxUpdateRoomActionPerformed(evt);
            }
        });

        roomNumberUpdateRoom.setEnabled(false);
        roomNumberUpdateRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomNumberUpdateRoomActionPerformed(evt);
            }
        });

        updateRoomButton.setText("Update");
        updateRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateRoomButtonActionPerformed(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel31.setText("UPDATE  ROOM");

        jLabel26.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel26.setText("Select room number");

        jComboBoxRoomUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRoomUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(176, 176, 176))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel27)
                                .addGap(171, 171, 171)
                                .addComponent(jLabel28))
                            .addComponent(jLabel29)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(capacityUpdateRoom, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                    .addComponent(roomNumberUpdateRoom, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(102, 102, 102)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(priceUpdateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(isVIPCheckBoxUpdateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel30)
                            .addComponent(descriptionUpdateRoom)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(266, 266, 266)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                            .addComponent(jComboBoxRoomUpdate, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(257, 257, 257)
                        .addComponent(updateRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(124, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxRoomUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(jLabel27))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(priceUpdateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomNumberUpdateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jLabel29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(capacityUpdateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(isVIPCheckBoxUpdateRoom))
                .addGap(47, 47, 47)
                .addComponent(jLabel30)
                .addGap(18, 18, 18)
                .addComponent(descriptionUpdateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updateRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );

        javax.swing.GroupLayout updateRoomCardLayout = new javax.swing.GroupLayout(updateRoomCard);
        updateRoomCard.setLayout(updateRoomCardLayout);
        updateRoomCardLayout.setHorizontalGroup(
            updateRoomCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateRoomCardLayout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 27, Short.MAX_VALUE))
        );
        updateRoomCardLayout.setVerticalGroup(
            updateRoomCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        roomCards.add(updateRoomCard, "updateRoomCard");

        deleteRoomCard.setBackground(new java.awt.Color(70, 129, 84));

        jPanel8.setBackground(new java.awt.Color(102, 255, 102));

        jLabel33.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel33.setText("Room number");

        jLabel34.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel34.setText("Price");

        jLabel35.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel35.setText("Capacity");

        jLabel36.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel36.setText("Description");

        isVIPCheckBoxDeleteRoom.setBackground(new java.awt.Color(102, 255, 102));
        isVIPCheckBoxDeleteRoom.setText("VIP");
        isVIPCheckBoxDeleteRoom.setEnabled(false);
        isVIPCheckBoxDeleteRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isVIPCheckBoxDeleteRoomActionPerformed(evt);
            }
        });

        roomNumberDeleteRoom.setBackground(new java.awt.Color(204, 204, 204));
        roomNumberDeleteRoom.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        roomNumberDeleteRoom.setEnabled(false);
        roomNumberDeleteRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomNumberDeleteRoomActionPerformed(evt);
            }
        });

        priceDeleteRoom.setBackground(new java.awt.Color(204, 204, 204));
        priceDeleteRoom.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        priceDeleteRoom.setEnabled(false);

        capacityDeleteRoom.setBackground(new java.awt.Color(204, 204, 204));
        capacityDeleteRoom.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        capacityDeleteRoom.setEnabled(false);

        descriptionDeleteRoom.setBackground(new java.awt.Color(204, 204, 204));
        descriptionDeleteRoom.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        descriptionDeleteRoom.setEnabled(false);

        deleteRoomButton.setLabel("Delete");
        deleteRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRoomButtonActionPerformed(evt);
            }
        });

        jLabel37.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel37.setText("DELETE  ROOM");

        jLabel32.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel32.setText("Select Room To Delete");

        jComboBoxRoomDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRoomDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(249, 249, 249))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jLabel34)
                                .addGap(185, 185, 185)
                                .addComponent(jLabel33))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(priceDeleteRoom, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                    .addComponent(jLabel35)
                                    .addComponent(capacityDeleteRoom))
                                .addGap(64, 64, 64)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(isVIPCheckBoxDeleteRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(roomNumberDeleteRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel36)
                            .addComponent(descriptionDeleteRoom)))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(264, 264, 264)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                            .addComponent(jComboBoxRoomDelete, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(270, 270, 270)
                        .addComponent(deleteRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(167, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxRoomDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel34)
                            .addComponent(jLabel33))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomNumberDeleteRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1))
                    .addComponent(priceDeleteRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jLabel35)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(capacityDeleteRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(isVIPCheckBoxDeleteRoom))
                .addGap(18, 18, 18)
                .addComponent(jLabel36)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(descriptionDeleteRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );

        javax.swing.GroupLayout deleteRoomCardLayout = new javax.swing.GroupLayout(deleteRoomCard);
        deleteRoomCard.setLayout(deleteRoomCardLayout);
        deleteRoomCardLayout.setHorizontalGroup(
            deleteRoomCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        deleteRoomCardLayout.setVerticalGroup(
            deleteRoomCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        roomCards.add(deleteRoomCard, "deleteRoomCard");

        jSplitPane2.setRightComponent(roomCards);

        javax.swing.GroupLayout roomCardLayout = new javax.swing.GroupLayout(roomCard);
        roomCard.setLayout(roomCardLayout);
        roomCardLayout.setHorizontalGroup(
            roomCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomCardLayout.createSequentialGroup()
                .addComponent(jSplitPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 833, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 19, Short.MAX_VALUE))
        );
        roomCardLayout.setVerticalGroup(
            roomCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2)
        );

        mainCards.add(roomCard, "roomCard");

        customerCard.setBackground(new java.awt.Color(146, 188, 206));

        CustomerPanel.setBackground(new java.awt.Color(0, 114, 204));

        CreateCustomerMenuButton.setBackground(new java.awt.Color(0, 114, 204));
        CreateCustomerMenuButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        CreateCustomerMenuButton.setForeground(new java.awt.Color(255, 255, 255));
        CreateCustomerMenuButton.setText("Create Customer");
        CreateCustomerMenuButton.setBorderPainted(false);
        CreateCustomerMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateCustomerMenuButtonActionPerformed(evt);
            }
        });

        ShowCustomersMenuButton.setBackground(new java.awt.Color(0, 114, 204));
        ShowCustomersMenuButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ShowCustomersMenuButton.setForeground(new java.awt.Color(255, 255, 255));
        ShowCustomersMenuButton.setText("Show  Customers");
        ShowCustomersMenuButton.setBorderPainted(false);
        ShowCustomersMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowCustomersMenuButtonActionPerformed(evt);
            }
        });

        UpdateCustomerMenuButton.setBackground(new java.awt.Color(0, 114, 204));
        UpdateCustomerMenuButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        UpdateCustomerMenuButton.setForeground(new java.awt.Color(255, 255, 255));
        UpdateCustomerMenuButton.setText("Update Customer");
        UpdateCustomerMenuButton.setBorderPainted(false);
        UpdateCustomerMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateCustomerMenuButtonActionPerformed(evt);
            }
        });

        DeleteCustomerMenuButton.setBackground(new java.awt.Color(0, 114, 204));
        DeleteCustomerMenuButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        DeleteCustomerMenuButton.setForeground(new java.awt.Color(255, 255, 255));
        DeleteCustomerMenuButton.setText("Delete Customer");
        DeleteCustomerMenuButton.setBorderPainted(false);
        DeleteCustomerMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteCustomerMenuButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CustomerPanelLayout = new javax.swing.GroupLayout(CustomerPanel);
        CustomerPanel.setLayout(CustomerPanelLayout);
        CustomerPanelLayout.setHorizontalGroup(
            CustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CustomerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ShowCustomersMenuButton)
                    .addComponent(UpdateCustomerMenuButton)
                    .addComponent(DeleteCustomerMenuButton)
                    .addComponent(CreateCustomerMenuButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        CustomerPanelLayout.setVerticalGroup(
            CustomerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CustomerPanelLayout.createSequentialGroup()
                .addGap(162, 162, 162)
                .addComponent(CreateCustomerMenuButton)
                .addGap(18, 18, 18)
                .addComponent(ShowCustomersMenuButton)
                .addGap(18, 18, 18)
                .addComponent(UpdateCustomerMenuButton)
                .addGap(18, 18, 18)
                .addComponent(DeleteCustomerMenuButton)
                .addContainerGap(190, Short.MAX_VALUE))
        );

        jSplitPane3.setLeftComponent(CustomerPanel);

        customerCards.setBackground(new java.awt.Color(102, 204, 255));
        customerCards.setLayout(new java.awt.CardLayout());

        createCustomerCard.setBackground(new java.awt.Color(102, 204, 255));

        jPanel2.setBackground(new java.awt.Color(0, 204, 204));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("First Name");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Second Name");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Passport");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Birth Day");

        firstNameCreateCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameCreateCustomerActionPerformed(evt);
            }
        });

        createCustomerButton.setText("Create");
        createCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCustomerButtonActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setText("CREATE NEW CUSTOMER");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Phone");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("Email");

        phoneCreateCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneCreateCustomerActionPerformed(evt);
            }
        });

        emailCreateCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailCreateCustomerActionPerformed(evt);
            }
        });

        jDateChooserCustomerBithdayCreateCutomer.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooserCustomerBithdayCreateCutomerPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(emailCreateCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                        .addComponent(jLabel12)
                        .addComponent(jLabel9)
                        .addComponent(firstNameCreateCustomer)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(birthDayCreateCustomer)
                            .addGap(18, 18, 18)
                            .addComponent(jDateChooserCustomerBithdayCreateCutomer, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel6))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(secondNameCreateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passportCreateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(phoneCreateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(206, Short.MAX_VALUE)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(178, 178, 178))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(249, 249, 249)
                .addComponent(createCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameCreateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(secondNameCreateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(birthDayCreateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(passportCreateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jDateChooserCustomerBithdayCreateCutomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailCreateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneCreateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61)
                .addComponent(createCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(81, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout createCustomerCardLayout = new javax.swing.GroupLayout(createCustomerCard);
        createCustomerCard.setLayout(createCustomerCardLayout);
        createCustomerCardLayout.setHorizontalGroup(
            createCustomerCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createCustomerCardLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 74, Short.MAX_VALUE))
        );
        createCustomerCardLayout.setVerticalGroup(
            createCustomerCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        customerCards.add(createCustomerCard, "createCustomerCard");

        showCustomerCard.setBackground(new java.awt.Color(0, 204, 204));

        jTableCustomers.setBorder(new javax.swing.border.MatteBorder(null));
        jScrollPane3.setViewportView(jTableCustomers);

        jLabel87.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel87.setText("Customers");

        javax.swing.GroupLayout showCustomerCardLayout = new javax.swing.GroupLayout(showCustomerCard);
        showCustomerCard.setLayout(showCustomerCardLayout);
        showCustomerCardLayout.setHorizontalGroup(
            showCustomerCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, showCustomerCardLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(showCustomerCardLayout.createSequentialGroup()
                .addGap(279, 279, 279)
                .addComponent(jLabel87)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        showCustomerCardLayout.setVerticalGroup(
            showCustomerCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, showCustomerCardLayout.createSequentialGroup()
                .addContainerGap(53, Short.MAX_VALUE)
                .addComponent(jLabel87)
                .addGap(38, 38, 38)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
        );

        customerCards.add(showCustomerCard, "showCustomerCard");

        updateCustomerCard.setBackground(new java.awt.Color(102, 204, 255));

        jPanel11.setBackground(new java.awt.Color(51, 204, 255));

        jLabel44.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel44.setText("First Name");

        jLabel45.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel45.setText("Second Name");

        jLabel46.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel46.setText("Passport");

        jLabel47.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel47.setText("Birth Day");

        firstNameUpdateCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameUpdateCustomerActionPerformed(evt);
            }
        });

        passportUpdateCustomer.setEnabled(false);

        birthDayUpdateCustomer.setEnabled(false);

        updateCustomerButton.setText("Update");
        updateCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCustomerButtonActionPerformed(evt);
            }
        });

        jLabel48.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel48.setText("UPDATE CUSTOMER");

        jLabel49.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel49.setText("Phone");

        jLabel50.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel50.setText("Email");

        phoneUpdateCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneUpdateCustomerActionPerformed(evt);
            }
        });

        emailUpdateCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailUpdateCustomerActionPerformed(evt);
            }
        });

        jComboBoxCustomerUpdateCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCustomerUpdateCustomerActionPerformed(evt);
            }
        });

        jLabel38.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel38.setText("Select Customer Passport");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(emailUpdateCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                            .addComponent(jLabel50)
                            .addComponent(jLabel47)
                            .addComponent(firstNameUpdateCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                            .addComponent(jLabel44)
                            .addComponent(birthDayUpdateCustomer))
                        .addGap(66, 66, 66)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(secondNameUpdateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel49)
                                .addComponent(phoneUpdateCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                                .addComponent(jLabel46)
                                .addComponent(passportUpdateCustomer))
                            .addComponent(jLabel45)))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(273, 273, 273)
                        .addComponent(updateCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(130, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel38)
                        .addGap(265, 265, 265))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(228, 228, 228))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addGap(0, 254, Short.MAX_VALUE)
                .addComponent(jComboBoxCustomerUpdateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(250, 250, 250))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel48)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(jLabel38)
                .addGap(18, 18, 18)
                .addComponent(jComboBoxCustomerUpdateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel44)
                    .addComponent(jLabel45))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(secondNameUpdateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firstNameUpdateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel47)
                    .addComponent(jLabel46))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passportUpdateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(birthDayUpdateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel49)
                    .addComponent(jLabel50))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailUpdateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneUpdateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addComponent(updateCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
        );

        javax.swing.GroupLayout updateCustomerCardLayout = new javax.swing.GroupLayout(updateCustomerCard);
        updateCustomerCard.setLayout(updateCustomerCardLayout);
        updateCustomerCardLayout.setHorizontalGroup(
            updateCustomerCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateCustomerCardLayout.createSequentialGroup()
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        updateCustomerCardLayout.setVerticalGroup(
            updateCustomerCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        customerCards.add(updateCustomerCard, "updateCustomerCard");

        deleteCustomerCard.setBackground(new java.awt.Color(102, 204, 255));

        jPanel12.setBackground(new java.awt.Color(0, 204, 204));

        jLabel51.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel51.setText("First Name");

        jLabel52.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel52.setText("Second Name");

        jLabel53.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel53.setText("Passport");

        jLabel54.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel54.setText("Birth Day");

        firstNameDeleteCustomer.setBackground(new java.awt.Color(204, 204, 204));
        firstNameDeleteCustomer.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        firstNameDeleteCustomer.setEnabled(false);
        firstNameDeleteCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameDeleteCustomerActionPerformed(evt);
            }
        });

        secondNameDeleteCustomer.setBackground(new java.awt.Color(204, 204, 204));
        secondNameDeleteCustomer.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        secondNameDeleteCustomer.setEnabled(false);

        passportDeleteCustomer.setBackground(new java.awt.Color(204, 204, 204));
        passportDeleteCustomer.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        passportDeleteCustomer.setEnabled(false);

        birthDayDeleteCustomer.setBackground(new java.awt.Color(204, 204, 204));
        birthDayDeleteCustomer.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        birthDayDeleteCustomer.setEnabled(false);

        deleteCustomerButton.setText("Delete");
        deleteCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCustomerButtonActionPerformed(evt);
            }
        });

        jLabel55.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel55.setText("DELETE CUSTOMER");

        jLabel56.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel56.setText("Phone");

        jLabel57.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel57.setText("Email");

        phoneDeleteCustomer.setBackground(new java.awt.Color(204, 204, 204));
        phoneDeleteCustomer.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        phoneDeleteCustomer.setEnabled(false);
        phoneDeleteCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneDeleteCustomerActionPerformed(evt);
            }
        });

        emailDeleteCustomer.setBackground(new java.awt.Color(204, 204, 204));
        emailDeleteCustomer.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        emailDeleteCustomer.setEnabled(false);
        emailDeleteCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailDeleteCustomerActionPerformed(evt);
            }
        });

        jComboBoxCustomerDeleteCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCustomerDeleteCustomerActionPerformed(evt);
            }
        });

        jLabel84.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel84.setText("Select Customer Password");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel55, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel84, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(123, 123, 123))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(birthDayDeleteCustomer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                            .addComponent(emailDeleteCustomer, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel57, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel54, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel52, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(secondNameDeleteCustomer, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(63, 63, 63)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passportDeleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel51)
                                .addComponent(jLabel53)
                                .addComponent(phoneDeleteCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                                .addComponent(firstNameDeleteCustomer))
                            .addComponent(jLabel56))))
                .addGap(0, 154, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jComboBoxCustomerDeleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(219, 219, 219))
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(245, 245, 245)
                .addComponent(deleteCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel55, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jLabel84)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxCustomerDeleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel52)
                            .addComponent(jLabel51))
                        .addGap(18, 18, 18)
                        .addComponent(firstNameDeleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(secondNameDeleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel53)
                    .addComponent(jLabel54))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passportDeleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(birthDayDeleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel57)
                    .addComponent(jLabel56))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailDeleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneDeleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(deleteCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );

        javax.swing.GroupLayout deleteCustomerCardLayout = new javax.swing.GroupLayout(deleteCustomerCard);
        deleteCustomerCard.setLayout(deleteCustomerCardLayout);
        deleteCustomerCardLayout.setHorizontalGroup(
            deleteCustomerCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        deleteCustomerCardLayout.setVerticalGroup(
            deleteCustomerCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        customerCards.add(deleteCustomerCard, "deleteCustomerCard");

        jSplitPane3.setRightComponent(customerCards);

        javax.swing.GroupLayout customerCardLayout = new javax.swing.GroupLayout(customerCard);
        customerCard.setLayout(customerCardLayout);
        customerCardLayout.setHorizontalGroup(
            customerCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerCardLayout.createSequentialGroup()
                .addComponent(jSplitPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 833, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 19, Short.MAX_VALUE))
        );
        customerCardLayout.setVerticalGroup(
            customerCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane3)
        );

        mainCards.add(customerCard, "customerCard");

        reservationCard.setBackground(new java.awt.Color(255, 164, 106));

        ReservationPanel.setBackground(new java.awt.Color(187, 57, 1));

        CreateReservationMenuButton.setBackground(new java.awt.Color(187, 57, 1));
        CreateReservationMenuButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        CreateReservationMenuButton.setForeground(new java.awt.Color(255, 255, 255));
        CreateReservationMenuButton.setText("Create Reservation");
        CreateReservationMenuButton.setBorderPainted(false);
        CreateReservationMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateReservationMenuButtonActionPerformed(evt);
            }
        });

        ShowReservationsMenuButton.setBackground(new java.awt.Color(187, 57, 1));
        ShowReservationsMenuButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ShowReservationsMenuButton.setForeground(new java.awt.Color(255, 255, 255));
        ShowReservationsMenuButton.setText("Show Reservations");
        ShowReservationsMenuButton.setBorderPainted(false);
        ShowReservationsMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowReservationsMenuButtonActionPerformed(evt);
            }
        });

        UpdateReservationMenuButton.setBackground(new java.awt.Color(187, 57, 1));
        UpdateReservationMenuButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        UpdateReservationMenuButton.setForeground(new java.awt.Color(255, 255, 255));
        UpdateReservationMenuButton.setText("Update Reservation");
        UpdateReservationMenuButton.setBorderPainted(false);
        UpdateReservationMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateReservationMenuButtonActionPerformed(evt);
            }
        });

        DeleteReservationMenuButton.setBackground(new java.awt.Color(187, 57, 1));
        DeleteReservationMenuButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        DeleteReservationMenuButton.setForeground(new java.awt.Color(255, 255, 255));
        DeleteReservationMenuButton.setText("Delete Reservation");
        DeleteReservationMenuButton.setBorderPainted(false);
        DeleteReservationMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteReservationMenuButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ReservationPanelLayout = new javax.swing.GroupLayout(ReservationPanel);
        ReservationPanel.setLayout(ReservationPanelLayout);
        ReservationPanelLayout.setHorizontalGroup(
            ReservationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ReservationPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(CreateReservationMenuButton)
                .addGap(38, 38, 38))
            .addGroup(ReservationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ReservationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ShowReservationsMenuButton)
                    .addComponent(UpdateReservationMenuButton)
                    .addComponent(DeleteReservationMenuButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ReservationPanelLayout.setVerticalGroup(
            ReservationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReservationPanelLayout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addComponent(CreateReservationMenuButton)
                .addGap(18, 18, 18)
                .addComponent(ShowReservationsMenuButton)
                .addGap(18, 18, 18)
                .addComponent(UpdateReservationMenuButton)
                .addGap(18, 18, 18)
                .addComponent(DeleteReservationMenuButton)
                .addContainerGap(193, Short.MAX_VALUE))
        );

        jSplitPane4.setLeftComponent(ReservationPanel);

        reservationCards.setBackground(new java.awt.Color(255, 153, 102));
        reservationCards.setLayout(new java.awt.CardLayout());

        createReservationCard.setBackground(new java.awt.Color(255, 153, 102));

        jPanel4.setBackground(new java.awt.Color(255, 153, 102));

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel21.setText("Check in");

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel22.setText("Check out");

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel23.setText("Customer passport");

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel24.setText("Room number");

        chechInCreateReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chechInCreateReservationActionPerformed(evt);
            }
        });

        chechOutCreateReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chechOutCreateReservationActionPerformed(evt);
            }
        });

        createReservationButton.setText("Create");
        createReservationButton.setEnabled(false);
        createReservationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createReservationButtonActionPerformed(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel25.setText("CREATE NEW RESERVATION");

        jDateChooser1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser1PropertyChange(evt);
            }
        });

        jDateChooser2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser2PropertyChange(evt);
            }
        });

        jComboBoxSelectCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSelectCustomerActionPerformed(evt);
            }
        });

        jComboBoxReservationCreateRoom.setEnabled(false);

        jButtonGetPossibleRooms.setText("Get Possible Rooms");
        jButtonGetPossibleRooms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGetPossibleRoomsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(254, 254, 254)
                        .addComponent(createReservationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel21)
                                .addGap(145, 145, 145)
                                .addComponent(jLabel22))
                            .addComponent(jLabel23)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jComboBoxSelectCustomer, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addComponent(chechInCreateReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(195, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addGap(144, 144, 144)
                                .addComponent(chechOutCreateReservation)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel24)
                            .addComponent(jComboBoxReservationCreateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(143, 143, 143))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(229, 229, 229)
                .addComponent(jButtonGetPossibleRooms, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jLabel22))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chechInCreateReservation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chechOutCreateReservation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57)
                .addComponent(jButtonGetPossibleRooms, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSelectCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxReservationCreateRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(createReservationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
        );

        javax.swing.GroupLayout createReservationCardLayout = new javax.swing.GroupLayout(createReservationCard);
        createReservationCard.setLayout(createReservationCardLayout);
        createReservationCardLayout.setHorizontalGroup(
            createReservationCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createReservationCardLayout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        createReservationCardLayout.setVerticalGroup(
            createReservationCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        reservationCards.add(createReservationCard, "createReservationCard");

        showReservationCard.setBackground(new java.awt.Color(255, 153, 102));

        jScrollPane4.setViewportView(jTableReservation);

        jLabel88.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel88.setText("Reservations");

        javax.swing.GroupLayout showReservationCardLayout = new javax.swing.GroupLayout(showReservationCard);
        showReservationCard.setLayout(showReservationCardLayout);
        showReservationCardLayout.setHorizontalGroup(
            showReservationCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showReservationCardLayout.createSequentialGroup()
                .addGap(257, 257, 257)
                .addComponent(jLabel88)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, showReservationCardLayout.createSequentialGroup()
                .addContainerGap(110, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );
        showReservationCardLayout.setVerticalGroup(
            showReservationCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, showReservationCardLayout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addComponent(jLabel88)
                .addGap(32, 32, 32)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        reservationCards.add(showReservationCard, "showReservationCard");

        updateReservationCard.setBackground(new java.awt.Color(255, 153, 102));

        jPanel17.setBackground(new java.awt.Color(255, 153, 102));

        jLabel62.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel62.setText("Check in");

        jLabel63.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel63.setText("Check out");

        jLabel75.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel75.setText("Room number");

        checkInUpdateReservation.setEnabled(false);
        checkInUpdateReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkInUpdateReservationActionPerformed(evt);
            }
        });

        checkOutUpdateReservation.setEnabled(false);

        updateReservationButton.setText("Update");
        updateReservationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateReservationButtonActionPerformed(evt);
            }
        });

        jLabel76.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel76.setText("UPDATE  RESERVATION");

        chooserCheckInUpdateReservation.setEnabled(false);
        chooserCheckInUpdateReservation.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                chooserCheckInUpdateReservationPropertyChange(evt);
            }
        });

        chooserCheckOutUpdateReservation.setEnabled(false);
        chooserCheckOutUpdateReservation.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                chooserCheckOutUpdateReservationPropertyChange(evt);
            }
        });

        jComboBoxSelectRoomUpdateReservation.setEnabled(false);
        jComboBoxSelectRoomUpdateReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSelectRoomUpdateReservationActionPerformed(evt);
            }
        });

        jCustomerUpdateText.setBackground(new java.awt.Color(153, 153, 153));
        jCustomerUpdateText.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jCustomerUpdateText.setEnabled(false);
        jCustomerUpdateText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCustomerUpdateTextActionPerformed(evt);
            }
        });

        jComboBoxReservationUpdateCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxReservationUpdateCustomerActionPerformed(evt);
            }
        });
        jComboBoxReservationUpdateCustomer.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jComboBoxReservationUpdateCustomerPropertyChange(evt);
            }
        });

        jLabel77.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel77.setText("Select Customer Passport");

        jLabel64.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel64.setText("Customer passport");

        jComboxReservationIdUpdateReservation.setEnabled(false);
        jComboxReservationIdUpdateReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboxReservationIdUpdateReservationActionPerformed(evt);
            }
        });

        jLabel58.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel58.setText("Select Reservation");

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel17Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel76, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(155, 155, 155))
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel62)
                            .addComponent(jLabel63)
                            .addGroup(jPanel17Layout.createSequentialGroup()
                                .addComponent(checkOutUpdateReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chooserCheckOutUpdateReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel17Layout.createSequentialGroup()
                                .addComponent(checkInUpdateReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chooserCheckInUpdateReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jComboBoxReservationUpdateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel77, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(80, 80, 80)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxSelectRoomUpdateReservation, 0, 171, Short.MAX_VALUE)
                            .addComponent(jLabel64, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCustomerUpdateText, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                            .addComponent(jLabel75)
                            .addComponent(jComboxReservationIdUpdateReservation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel58)))
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGap(205, 205, 205)
                        .addComponent(updateReservationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(136, Short.MAX_VALUE))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel76, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel77)
                    .addComponent(jLabel58))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxReservationUpdateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboxReservationIdUpdateReservation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel62)
                    .addComponent(jLabel75))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkInUpdateReservation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooserCheckInUpdateReservation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSelectRoomUpdateReservation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel64)
                    .addComponent(jLabel63))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCustomerUpdateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkOutUpdateReservation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addComponent(updateReservationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(chooserCheckOutUpdateReservation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(170, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout updateReservationCardLayout = new javax.swing.GroupLayout(updateReservationCard);
        updateReservationCard.setLayout(updateReservationCardLayout);
        updateReservationCardLayout.setHorizontalGroup(
            updateReservationCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        updateReservationCardLayout.setVerticalGroup(
            updateReservationCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        reservationCards.add(updateReservationCard, "updateReservationCard");

        deleteReservationCard.setBackground(new java.awt.Color(255, 153, 102));

        jPanel20.setBackground(new java.awt.Color(255, 153, 102));

        jLabel79.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel79.setText("Check in");

        jLabel80.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel80.setText("Check out");

        jLabel81.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel81.setText("Customer Passport");

        jLabel82.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel82.setText("Room Number");

        checkInDeleteReservation.setBackground(new java.awt.Color(204, 204, 204));
        checkInDeleteReservation.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        checkInDeleteReservation.setEnabled(false);
        checkInDeleteReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkInDeleteReservationActionPerformed(evt);
            }
        });

        checkOutDeleteReservation.setBackground(new java.awt.Color(204, 204, 204));
        checkOutDeleteReservation.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        checkOutDeleteReservation.setEnabled(false);

        deleteReservationButton.setText("Delete");
        deleteReservationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteReservationButtonActionPerformed(evt);
            }
        });

        jLabel83.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel83.setText("DELETE RESERVATION");

        jComboBoxReservationDelete.setEnabled(false);
        jComboBoxReservationDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxReservationDeleteActionPerformed(evt);
            }
        });

        jLabel39.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel39.setText("Select Reservation");

        jTextReservationDeleteCustomerId.setBackground(new java.awt.Color(204, 204, 204));
        jTextReservationDeleteCustomerId.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextReservationDeleteCustomerId.setEnabled(false);
        jTextReservationDeleteCustomerId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextReservationDeleteCustomerIdActionPerformed(evt);
            }
        });

        jTextReservationDeleteRoomId.setBackground(new java.awt.Color(204, 204, 204));
        jTextReservationDeleteRoomId.setDisabledTextColor(new java.awt.Color(0, 0, 0));

        jLabel85.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel85.setText("Select Customer Passport");

        jComboBoxSelectCustomerDeleteReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSelectCustomerDeleteReservationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel79)
                            .addComponent(jLabel85, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                            .addComponent(jComboBoxSelectCustomerDeleteReservation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(checkOutDeleteReservation)
                            .addComponent(jTextReservationDeleteCustomerId)
                            .addComponent(jLabel81, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(81, 81, 81)
                        .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel39)
                            .addComponent(checkInDeleteReservation)
                            .addComponent(jLabel80)
                            .addComponent(jTextReservationDeleteRoomId)
                            .addComponent(jComboBoxReservationDelete, 0, 145, Short.MAX_VALUE)
                            .addComponent(jLabel82, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addComponent(jLabel83, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)))
                .addContainerGap(125, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(deleteReservationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(170, 170, 170))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel83, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(jLabel85))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxReservationDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSelectCustomerDeleteReservation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel79)
                    .addComponent(jLabel80))
                .addGap(9, 9, 9)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkOutDeleteReservation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkInDeleteReservation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel81)
                    .addComponent(jLabel82))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextReservationDeleteCustomerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextReservationDeleteRoomId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addComponent(deleteReservationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(140, 140, 140))
        );

        javax.swing.GroupLayout deleteReservationCardLayout = new javax.swing.GroupLayout(deleteReservationCard);
        deleteReservationCard.setLayout(deleteReservationCardLayout);
        deleteReservationCardLayout.setHorizontalGroup(
            deleteReservationCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        deleteReservationCardLayout.setVerticalGroup(
            deleteReservationCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel20, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        reservationCards.add(deleteReservationCard, "deleteReservationCard");

        jSplitPane4.setRightComponent(reservationCards);

        javax.swing.GroupLayout reservationCardLayout = new javax.swing.GroupLayout(reservationCard);
        reservationCard.setLayout(reservationCardLayout);
        reservationCardLayout.setHorizontalGroup(
            reservationCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservationCardLayout.createSequentialGroup()
                .addComponent(jSplitPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 834, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 18, Short.MAX_VALUE))
        );
        reservationCardLayout.setVerticalGroup(
            reservationCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane4)
        );

        mainCards.add(reservationCard, "reservationCard");
        reservationCard.getAccessibleContext().setAccessibleName("");

        receptionCard.setBackground(new java.awt.Color(238, 215, 159));

        ReceptionPanel.setBackground(new java.awt.Color(206, 189, 20));

        CreateReceptionistMenuButton.setBackground(new java.awt.Color(206, 189, 20));
        CreateReceptionistMenuButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        CreateReceptionistMenuButton.setForeground(new java.awt.Color(255, 255, 255));
        CreateReceptionistMenuButton.setText("Create Receptionist");
        CreateReceptionistMenuButton.setBorderPainted(false);
        CreateReceptionistMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateReceptionistMenuButtonActionPerformed(evt);
            }
        });

        ShowReceptionistMenuButton.setBackground(new java.awt.Color(206, 189, 20));
        ShowReceptionistMenuButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ShowReceptionistMenuButton.setForeground(new java.awt.Color(255, 255, 255));
        ShowReceptionistMenuButton.setText("Show Receptionist");
        ShowReceptionistMenuButton.setBorderPainted(false);
        ShowReceptionistMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowReceptionistMenuButtonActionPerformed(evt);
            }
        });

        UpdateReceptionistMenuButton.setBackground(new java.awt.Color(206, 189, 20));
        UpdateReceptionistMenuButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        UpdateReceptionistMenuButton.setForeground(new java.awt.Color(255, 255, 255));
        UpdateReceptionistMenuButton.setText("Update Receptionist");
        UpdateReceptionistMenuButton.setBorderPainted(false);
        UpdateReceptionistMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateReceptionistMenuButtonActionPerformed(evt);
            }
        });

        DeleteReceptionistMenuButton.setBackground(new java.awt.Color(206, 189, 20));
        DeleteReceptionistMenuButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        DeleteReceptionistMenuButton.setForeground(new java.awt.Color(255, 255, 255));
        DeleteReceptionistMenuButton.setText("Delete Receptionist");
        DeleteReceptionistMenuButton.setBorderPainted(false);
        DeleteReceptionistMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteReceptionistMenuButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ReceptionPanelLayout = new javax.swing.GroupLayout(ReceptionPanel);
        ReceptionPanel.setLayout(ReceptionPanelLayout);
        ReceptionPanelLayout.setHorizontalGroup(
            ReceptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ReceptionPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(CreateReceptionistMenuButton)
                .addGap(34, 34, 34))
            .addGroup(ReceptionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ReceptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ShowReceptionistMenuButton)
                    .addComponent(UpdateReceptionistMenuButton)
                    .addComponent(DeleteReceptionistMenuButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ReceptionPanelLayout.setVerticalGroup(
            ReceptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReceptionPanelLayout.createSequentialGroup()
                .addGap(152, 152, 152)
                .addComponent(CreateReceptionistMenuButton)
                .addGap(18, 18, 18)
                .addComponent(ShowReceptionistMenuButton)
                .addGap(18, 18, 18)
                .addComponent(UpdateReceptionistMenuButton)
                .addGap(18, 18, 18)
                .addComponent(DeleteReceptionistMenuButton)
                .addContainerGap(195, Short.MAX_VALUE))
        );

        jSplitPane5.setLeftComponent(ReceptionPanel);

        receptionCards.setLayout(new java.awt.CardLayout());

        createReceptionistCard.setBackground(new java.awt.Color(204, 237, 84));

        jPanel3.setBackground(new java.awt.Color(204, 237, 84));

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("First Name");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setText("Second Name");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setText("Passport");

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setText("Birth Day");

        firstNameCreateReceptionist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameCreateReceptionistActionPerformed(evt);
            }
        });

        createReceptionistButton.setText("Create");
        createReceptionistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createReceptionistButtonActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel17.setText("CREATE NEW RECEPTIONIST");

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setText("Phone");

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel19.setText("Email");

        phoneCreateReceptionist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneCreateReceptionistActionPerformed(evt);
            }
        });

        emailCreateReceptionist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailCreateReceptionistActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel20.setText("Address");

        addressCreateReceptionist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressCreateReceptionistActionPerformed(evt);
            }
        });

        jDateChooserBirthDayReceptionistCreateReceptionist.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooserBirthDayReceptionistCreateReceptionistPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(createReceptionistButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addComponent(jLabel19)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(firstNameCreateReceptionist, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                            .addComponent(emailCreateReceptionist)
                            .addComponent(addressCreateReceptionist)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(jLabel14)
                            .addComponent(jLabel18)
                            .addComponent(jLabel15))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passportCreateReceptionist)
                            .addComponent(secondNameCreateReceptionist, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(phoneCreateReceptionist, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(birthDayCreateReceptionist)
                                .addGap(18, 18, 18)
                                .addComponent(jDateChooserBirthDayReceptionistCreateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(75, 75, 75))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(firstNameCreateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(secondNameCreateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(passportCreateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(birthDayCreateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel16))
                            .addComponent(jDateChooserBirthDayReceptionistCreateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(phoneCreateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18))
                        .addGap(28, 28, 28)
                        .addComponent(emailCreateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel19))
                .addGap(39, 39, 39)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressCreateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(createReceptionistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout createReceptionistCardLayout = new javax.swing.GroupLayout(createReceptionistCard);
        createReceptionistCard.setLayout(createReceptionistCardLayout);
        createReceptionistCardLayout.setHorizontalGroup(
            createReceptionistCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, createReceptionistCardLayout.createSequentialGroup()
                .addContainerGap(157, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112))
        );
        createReceptionistCardLayout.setVerticalGroup(
            createReceptionistCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createReceptionistCardLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        receptionCards.add(createReceptionistCard, "createReceptionistCard");

        showReceptionistCard.setBackground(new java.awt.Color(204, 237, 84));

        jLabel89.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel89.setText("Receptions");

        jTableReceptions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(jTableReceptions);

        javax.swing.GroupLayout showReceptionistCardLayout = new javax.swing.GroupLayout(showReceptionistCard);
        showReceptionistCard.setLayout(showReceptionistCardLayout);
        showReceptionistCardLayout.setHorizontalGroup(
            showReceptionistCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showReceptionistCardLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(showReceptionistCardLayout.createSequentialGroup()
                .addGap(249, 249, 249)
                .addComponent(jLabel89)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        showReceptionistCardLayout.setVerticalGroup(
            showReceptionistCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showReceptionistCardLayout.createSequentialGroup()
                .addContainerGap(109, Short.MAX_VALUE)
                .addComponent(jLabel89)
                .addGap(19, 19, 19)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        receptionCards.add(showReceptionistCard, "showReceptionistCard");

        updateReceptionistCard.setBackground(new java.awt.Color(204, 237, 84));

        jPanel15.setBackground(new java.awt.Color(204, 237, 84));

        jLabel41.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel41.setText("First Name");

        jLabel42.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel42.setText("Second Name");

        jLabel43.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel43.setText("Passport");

        jLabel65.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel65.setText("Birth Day");

        firstNameUpdateReceptionist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameUpdateReceptionistActionPerformed(evt);
            }
        });

        passportUpdateReceptionist.setEnabled(false);

        birthDayUpdateReceptionist.setEnabled(false);

        updateReceptionistButton.setText("Update");
        updateReceptionistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateReceptionistButtonActionPerformed(evt);
            }
        });

        jLabel66.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel66.setText("UPDATE RECEPTIONIST");

        jLabel67.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel67.setText("Phone");

        jLabel68.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel68.setText("Email");

        phoneUpdateReceptionist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneUpdateReceptionistActionPerformed(evt);
            }
        });

        emailUpdateReceptionist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailUpdateReceptionistActionPerformed(evt);
            }
        });

        jLabel69.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel69.setText("Address");

        addressUpdateReceptionist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressUpdateReceptionistActionPerformed(evt);
            }
        });

        jComboBoxRecepcionistUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRecepcionistUpdateActionPerformed(evt);
            }
        });

        jLabel78.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel78.setText("Select Recepcionist Passport");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap(124, Short.MAX_VALUE)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel69)
                            .addComponent(addressUpdateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel15Layout.createSequentialGroup()
                                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel41)
                                    .addComponent(firstNameUpdateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel43)
                                    .addComponent(passportUpdateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel65)
                                    .addComponent(birthDayUpdateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(86, 86, 86)
                                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel42)
                                        .addComponent(secondNameUpdateReceptionist)
                                        .addComponent(jLabel68)
                                        .addComponent(emailUpdateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel67)
                                    .addComponent(phoneUpdateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(updateReceptionistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)))
                        .addGap(107, 107, 107))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jComboBoxRecepcionistUpdate, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel78, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE))
                        .addGap(227, 227, 227))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                        .addComponent(jLabel66)
                        .addGap(209, 209, 209))))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel66, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel78)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxRecepcionistUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(jLabel42))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameUpdateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(secondNameUpdateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43)
                    .addComponent(jLabel68))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passportUpdateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailUpdateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel65)
                    .addComponent(jLabel67))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(birthDayUpdateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneUpdateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addComponent(jLabel69)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addressUpdateReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(updateReceptionistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout updateReceptionistCardLayout = new javax.swing.GroupLayout(updateReceptionistCard);
        updateReceptionistCard.setLayout(updateReceptionistCardLayout);
        updateReceptionistCardLayout.setHorizontalGroup(
            updateReceptionistCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        updateReceptionistCardLayout.setVerticalGroup(
            updateReceptionistCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        receptionCards.add(updateReceptionistCard, "updateReceptionistCard");

        deleteReceptionistCard.setBackground(new java.awt.Color(204, 237, 84));

        jPanel16.setBackground(new java.awt.Color(204, 237, 84));

        jLabel59.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel59.setText("First Name");

        jLabel60.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel60.setText("Second Name");

        jLabel61.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel61.setText("Passport");

        jLabel70.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel70.setText("Birth Day");

        firstNameDeleteReceptionist.setBackground(new java.awt.Color(204, 204, 204));
        firstNameDeleteReceptionist.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        firstNameDeleteReceptionist.setEnabled(false);
        firstNameDeleteReceptionist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameDeleteReceptionistActionPerformed(evt);
            }
        });

        secondNameDeleteReceptionist.setBackground(new java.awt.Color(204, 204, 204));
        secondNameDeleteReceptionist.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        secondNameDeleteReceptionist.setEnabled(false);

        passportDeleteReceptionist.setBackground(new java.awt.Color(204, 204, 204));
        passportDeleteReceptionist.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        passportDeleteReceptionist.setEnabled(false);

        birthDayDeleteReceptionist.setBackground(new java.awt.Color(204, 204, 204));
        birthDayDeleteReceptionist.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        birthDayDeleteReceptionist.setEnabled(false);

        deleteReceptionistButton.setText("Delete");
        deleteReceptionistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteReceptionistButtonActionPerformed(evt);
            }
        });

        jLabel71.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel71.setText("DELETE RECEPTIONIST");

        jLabel72.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel72.setText("Phone");

        jLabel73.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel73.setText("Email");

        phoneDeleteReceptionist.setBackground(new java.awt.Color(204, 204, 204));
        phoneDeleteReceptionist.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        phoneDeleteReceptionist.setEnabled(false);
        phoneDeleteReceptionist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneDeleteReceptionistActionPerformed(evt);
            }
        });

        emailDeleteReceptionist.setBackground(new java.awt.Color(204, 204, 204));
        emailDeleteReceptionist.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        emailDeleteReceptionist.setEnabled(false);
        emailDeleteReceptionist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailDeleteReceptionistActionPerformed(evt);
            }
        });

        jLabel74.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel74.setText("Address");

        addressDeleteReceptionist.setBackground(new java.awt.Color(204, 204, 204));
        addressDeleteReceptionist.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        addressDeleteReceptionist.setEnabled(false);
        addressDeleteReceptionist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressDeleteReceptionistActionPerformed(evt);
            }
        });

        jComboBoxReceptionDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxReceptionDeleteActionPerformed(evt);
            }
        });

        jLabel40.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel40.setText("Select Reception Passport");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap(202, Short.MAX_VALUE)
                .addComponent(jLabel71)
                .addGap(209, 209, 209))
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(addressDeleteReceptionist)
                                .addGroup(jPanel16Layout.createSequentialGroup()
                                    .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(phoneDeleteReceptionist, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel59, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(firstNameDeleteReceptionist, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel70, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(birthDayDeleteReceptionist, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel72)
                                        .addComponent(jLabel74))
                                    .addGap(77, 77, 77)
                                    .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel73)
                                        .addComponent(jLabel60)
                                        .addComponent(secondNameDeleteReceptionist)
                                        .addComponent(jLabel61)
                                        .addComponent(passportDeleteReceptionist)
                                        .addComponent(emailDeleteReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel16Layout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addComponent(deleteReceptionistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel40, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                            .addComponent(jComboBoxReceptionDelete, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel71, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel40)
                .addGap(14, 14, 14)
                .addComponent(jComboBoxReceptionDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel60)
                    .addComponent(jLabel59))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(secondNameDeleteReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firstNameDeleteReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel61)
                    .addComponent(jLabel70))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passportDeleteReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(birthDayDeleteReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel72)
                    .addComponent(jLabel73))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneDeleteReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailDeleteReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jLabel74)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addressDeleteReceptionist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(deleteReceptionistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(53, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout deleteReceptionistCardLayout = new javax.swing.GroupLayout(deleteReceptionistCard);
        deleteReceptionistCard.setLayout(deleteReceptionistCardLayout);
        deleteReceptionistCardLayout.setHorizontalGroup(
            deleteReceptionistCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        deleteReceptionistCardLayout.setVerticalGroup(
            deleteReceptionistCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        receptionCards.add(deleteReceptionistCard, "deleteReceptionistCard");

        jSplitPane5.setRightComponent(receptionCards);

        javax.swing.GroupLayout receptionCardLayout = new javax.swing.GroupLayout(receptionCard);
        receptionCard.setLayout(receptionCardLayout);
        receptionCardLayout.setHorizontalGroup(
            receptionCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(receptionCardLayout.createSequentialGroup()
                .addComponent(jSplitPane5)
                .addContainerGap())
        );
        receptionCardLayout.setVerticalGroup(
            receptionCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(receptionCardLayout.createSequentialGroup()
                .addComponent(jSplitPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 5, Short.MAX_VALUE))
        );

        mainCards.add(receptionCard, "receptionCard");

        jSplitPane1.setRightComponent(mainCards);

        getContentPane().add(jSplitPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-2, 2, 1020, 510));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void roomManagerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomManagerButtonActionPerformed

        cardLayout.show(mainCards, "roomCard");
    }//GEN-LAST:event_roomManagerButtonActionPerformed

    private void reservationManagerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservationManagerButtonActionPerformed
        this.response = "";
        try {
            IntegrationRequest integrationRequest = new IntegrationRequest("Customer", "getAll", new Customer());
            String json = this.objectMapper.writeValueAsString(integrationRequest);
            this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
            IEntity[] customers = parseResponse(timer());
            if (customers != null && customers.length > 0) {
                jComboBoxSelectCustomer.removeAllItems();
                for (IEntity entity : customers) {
                    String idCustomer = entity.getId().toString();
                    String passport = ((Customer) entity).getPassport();
                    jComboBoxSelectCustomer.addItem(new ComboItem(idCustomer, passport));
                }
            }
        } catch (JsonProcessingException ex) {
        }
        this.response = "";
        cardLayout.show(mainCards, "reservationCard");
    }//GEN-LAST:event_reservationManagerButtonActionPerformed

    private void receptionManagerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receptionManagerButtonActionPerformed

        cardLayout.show(mainCards, "receptionCard");
    }//GEN-LAST:event_receptionManagerButtonActionPerformed

    private void customerManagerButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerManagerButton1ActionPerformed

        cardLayout.show(mainCards, "customerCard");
    }//GEN-LAST:event_customerManagerButton1ActionPerformed

    private void ShowRoomsMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowRoomsMenuButtonActionPerformed
        this.response = "";
        try {
            IntegrationRequest integrationRequest = new IntegrationRequest("Room", "getAll", new Room());
            String json = this.objectMapper.writeValueAsString(integrationRequest);
            this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));

            Object[] columns = new String[]{"Room Number", "Price", "Description", "Vip", "Capacity"};
            Room[] rooms = (Room[]) parseResponse(timer());
            if (rooms != null) {
                Object[][] records = new Object[rooms.length][5];
                for (int i = 0; i < rooms.length; i++) {
                    records[i][0] = rooms[i].getRoom_number();
                    records[i][1] = rooms[i].getPrice();
                    records[i][2] = rooms[i].getDescription();
                    records[i][3] = rooms[i].isVip();
                    records[i][4] = rooms[i].getCapacity();
                }

                DefaultTableModel model = new DefaultTableModel(records, columns) {
                    public boolean isCellEditable(int row, int col) {
                        return false;
                    }
                };
                jTableRooms.setModel(model);
            } else {
                Object[][] records = new Object[0][5];
                DefaultTableModel model = new DefaultTableModel(records, columns) {
                    public boolean isCellEditable(int row, int col) {
                        return false;
                    }
                };
                jTableRooms.setModel(model);
            }
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }
        cardLayoutRoom.show(roomCards, "showRoomCard");
        this.response = "";
    }//GEN-LAST:event_ShowRoomsMenuButtonActionPerformed

    private void CreateRoomMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateRoomMenuButtonActionPerformed
        cardLayoutRoom.show(roomCards, "createRoomCard");
    }//GEN-LAST:event_CreateRoomMenuButtonActionPerformed

    private void UpdateRoomMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateRoomMenuButtonActionPerformed
        this.response = "";
        try {
            IntegrationRequest integrationRequest = new IntegrationRequest("Room", "getAll", new Room());
            String json = this.objectMapper.writeValueAsString(integrationRequest);
            this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
            IEntity[] rooms = parseResponse(timer());
            if (rooms != null && rooms.length > 0) {
                jComboBoxRoomUpdate.removeAllItems();
                for (IEntity entity : rooms) {
                    String idRoom = entity.getId().toString();
                    String roomNumber = ((Room) entity).getRoom_number().toString();
                    jComboBoxRoomUpdate.addItem(new ComboItem(idRoom, roomNumber));
                }
                updateRoomButton.setEnabled(true);
            } else {
                updateRoomButton.setEnabled(false);
            }
        } catch (JsonProcessingException e) {
        }

        this.response = "";
        cardLayoutRoom.show(roomCards, "updateRoomCard");
    }//GEN-LAST:event_UpdateRoomMenuButtonActionPerformed

    private void DeleteRoomMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteRoomMenuButtonActionPerformed
        this.response = "";

        try {
            IntegrationRequest integrationRequest = new IntegrationRequest("Room", "getAll", new Room());
            String json = this.objectMapper.writeValueAsString(integrationRequest);
            this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
            IEntity[] rooms = parseResponse(timer());
            if (rooms != null && rooms.length > 0) {
                jComboBoxRoomDelete.removeAllItems();
                for (IEntity entity : rooms) {
                    String idRoom = entity.getId().toString();
                    String roomNumber = ((Room) entity).getRoom_number().toString();
                    jComboBoxRoomDelete.addItem(new ComboItem(idRoom, roomNumber));
                }
                deleteRoomButton.setEnabled(true);
            } else {
                deleteRoomButton.setEnabled(false);
            }
        } catch (JsonProcessingException e) {
        }

        this.response = "";
        cardLayoutRoom.show(roomCards, "deleteRoomCard");
    }//GEN-LAST:event_DeleteRoomMenuButtonActionPerformed

    private void isVIPCheckBoxCreateRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isVIPCheckBoxCreateRoomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isVIPCheckBoxCreateRoomActionPerformed

    private void roomNumberCreateRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomNumberCreateRoomActionPerformed

    }//GEN-LAST:event_roomNumberCreateRoomActionPerformed

    private void CreateCustomerMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateCustomerMenuButtonActionPerformed

        cardLayoutCustomer.show(customerCards, "createCustomerCard");
    }//GEN-LAST:event_CreateCustomerMenuButtonActionPerformed

    private void ShowCustomersMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowCustomersMenuButtonActionPerformed
        this.response = "";

        try {
            IntegrationRequest integrationRequest = new IntegrationRequest("Customer", "getAll", new Customer());
            String json = this.objectMapper.writeValueAsString(integrationRequest);
            Object[] columns = new String[]{"First Name", "Second Name", "Passport", "Day Of Birth", "Phone Number", "Email"};
            this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
            Customer[] customers = (Customer[]) parseResponse(timer());

            if (customers != null) {
                Object[][] records = new Object[customers.length][6];
                for (int i = 0; i < customers.length; i++) {
                    records[i][0] = customers[i].getFirst_name();
                    records[i][1] = customers[i].getSecond_name();
                    records[i][2] = customers[i].getPassport();
                    records[i][3] = customers[i].getDay_of_birth();
                    records[i][4] = customers[i].getPhone_number();
                    records[i][5] = customers[i].getEmail();
                }

                DefaultTableModel model = new DefaultTableModel(records, columns) {
                    public boolean isCellEditable(int row, int col) {
                        return false;
                    }
                };
                jTableCustomers.setModel(model);
            } else {
                Object[][] records = new Object[0][6];
                DefaultTableModel model = new DefaultTableModel(records, columns) {
                    public boolean isCellEditable(int row, int col) {
                        return false;
                    }
                };
                jTableCustomers.setModel(model);
            }

        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }

        this.response = "";
        cardLayoutCustomer.show(customerCards, "showCustomerCard");
    }//GEN-LAST:event_ShowCustomersMenuButtonActionPerformed

    private void UpdateCustomerMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateCustomerMenuButtonActionPerformed
        this.response = "";
        try {
            IntegrationRequest integrationRequest = new IntegrationRequest("Customer", "getAll", new Customer());
            String json = this.objectMapper.writeValueAsString(integrationRequest);
            this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
            IEntity[] customers = parseResponse(timer());
            if (customers != null && customers.length > 0) {
                jComboBoxCustomerUpdateCustomer.removeAllItems();
                for (IEntity entity : customers) {
                    String idCustomer = entity.getId().toString();
                    String passport = ((Customer) entity).getPassport();
                    jComboBoxCustomerUpdateCustomer.addItem(new ComboItem(idCustomer, passport));
                }
                updateCustomerButton.setEnabled(true);
            } else {
                firstNameUpdateCustomer.setText("");
                secondNameUpdateCustomer.setText("");
                passportUpdateCustomer.setText("");
                birthDayUpdateCustomer.setText("");
                emailUpdateCustomer.setText("");
                phoneUpdateCustomer.setText("");
                jComboBoxCustomerUpdateCustomer.removeAllItems();
                updateCustomerButton.setEnabled(false);
            }

        } catch (JsonProcessingException e) {
        }

        this.response = "";
        cardLayoutCustomer.show(customerCards, "updateCustomerCard");
    }//GEN-LAST:event_UpdateCustomerMenuButtonActionPerformed

    private void DeleteCustomerMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteCustomerMenuButtonActionPerformed
        this.response = "";
        try {
            IntegrationRequest integrationRequest = new IntegrationRequest("Customer", "getAll", new Customer());
            String json = this.objectMapper.writeValueAsString(integrationRequest);
            this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
            IEntity[] customers = parseResponse(timer());
            if (customers != null && customers.length > 0) {
                jComboBoxCustomerDeleteCustomer.removeAllItems();
                for (IEntity entity : customers) {
                    String idCustomer = entity.getId().toString();
                    String passport = ((Customer) entity).getPassport();
                    jComboBoxCustomerDeleteCustomer.addItem(new ComboItem(idCustomer, passport));
                }
                deleteCustomerButton.setEnabled(true);
            } else {
                deleteCustomerButton.setEnabled(false);
            }
        } catch (JsonProcessingException e) {
        }
        this.response = "";
        cardLayoutCustomer.show(customerCards, "deleteCustomerCard");
    }//GEN-LAST:event_DeleteCustomerMenuButtonActionPerformed

    private void firstNameCreateCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameCreateCustomerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameCreateCustomerActionPerformed

    private void phoneCreateCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneCreateCustomerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneCreateCustomerActionPerformed

    private void emailCreateCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailCreateCustomerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailCreateCustomerActionPerformed

    private void firstNameCreateReceptionistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameCreateReceptionistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameCreateReceptionistActionPerformed

    private void phoneCreateReceptionistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneCreateReceptionistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneCreateReceptionistActionPerformed

    private void emailCreateReceptionistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailCreateReceptionistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailCreateReceptionistActionPerformed

    private void addressCreateReceptionistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressCreateReceptionistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addressCreateReceptionistActionPerformed

    private void createRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRoomButtonActionPerformed
        this.response = "";
        // verification
        NumberVerifier numberVerifier = new NumberVerifier("Room number: ");
        DoubleVerifier priceVerifier = new DoubleVerifier("Price: ");
        NumberVerifier capacityVerifier = new NumberVerifier("Capacity: ");
        boolean numberValid = numberVerifier.verify(this.roomNumberCreateRoom);
        boolean capacityValid = capacityVerifier.verify(this.capacityCreateRoom);
        boolean priceValid = priceVerifier.verify(this.priceCreateRoom);
        if (numberValid && capacityValid && priceValid) {
            Room room = new Room();
            room.setRoom_number(Integer.parseInt(this.roomNumberCreateRoom.getText()));
            room.setPrice(Float.parseFloat(this.priceCreateRoom.getText()));
            room.setCapacity(Integer.parseInt(this.capacityCreateRoom.getText()));
            room.setVip(this.isVIPCheckBoxCreateRoom.isSelected());
            room.setDescription(this.descriptionCreateRoom.getText());
            try {
                IntegrationRequest integrationRequest = new IntegrationRequest("Room", "create", room);
                String json = this.objectMapper.writeValueAsString(integrationRequest);
                this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
                IEntity[] parsedAnswer = parseResponse(timer());
                this.roomNumberCreateRoom.setText("");
                this.capacityCreateRoom.setText("");
                this.priceCreateRoom.setText("");
                this.capacityCreateRoom.setText("");
                this.isVIPCheckBoxCreateRoom.setSelected(false);
                this.descriptionCreateRoom.setText("");
            } catch (JsonProcessingException e) {
            }
        }

        this.response = "";
    }//GEN-LAST:event_createRoomButtonActionPerformed

    private void isVIPCheckBoxUpdateRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isVIPCheckBoxUpdateRoomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isVIPCheckBoxUpdateRoomActionPerformed

    private void roomNumberUpdateRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomNumberUpdateRoomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomNumberUpdateRoomActionPerformed

    private void updateRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateRoomButtonActionPerformed
        this.response = "";
        NumberVerifier numberVerifier = new NumberVerifier("Room number: ");
        DoubleVerifier priceVerifier = new DoubleVerifier("Price: ");
        NumberVerifier capacityVerifier = new NumberVerifier("Capacity: ");
        boolean numberValid = numberVerifier.verify(this.roomNumberUpdateRoom);
        boolean capacityValid = capacityVerifier.verify(this.capacityUpdateRoom);
        boolean priceValid = priceVerifier.verify(this.priceUpdateRoom);
        if (numberValid && capacityValid && priceValid) {
            Room room = new Room();
            room.setRoom_number(Integer.parseInt(this.roomNumberUpdateRoom.getText()));
            room.setPrice(Float.parseFloat(this.priceUpdateRoom.getText()));
            room.setCapacity(Integer.parseInt(this.capacityUpdateRoom.getText()));
            room.setVip(this.isVIPCheckBoxUpdateRoom.isSelected());
            room.setDescription(this.descriptionUpdateRoom.getText());
            try {
                IntegrationRequest integrationRequest = new IntegrationRequest("Room", "updateBySpecificAttribute", room);
                String json = this.objectMapper.writeValueAsString(integrationRequest);
                this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
                IEntity[] parsedAnswer = parseResponse(timer());
            } catch (JsonProcessingException e) {
            }
        }

        this.response = "";
    }//GEN-LAST:event_updateRoomButtonActionPerformed

    private void isVIPCheckBoxDeleteRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isVIPCheckBoxDeleteRoomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isVIPCheckBoxDeleteRoomActionPerformed

    private void roomNumberDeleteRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomNumberDeleteRoomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomNumberDeleteRoomActionPerformed

    private void deleteRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRoomButtonActionPerformed
        this.response = "";
        try {
            Room room = new Room();
            room.setRoom_number(Integer.parseInt(this.jComboBoxRoomDelete.getItemAt(jComboBoxRoomDelete.getSelectedIndex()).getLabel()));
            IntegrationRequest integrationRequest = new IntegrationRequest("Room", "deleteBySpecificAtribute", room);
            String json = this.objectMapper.writeValueAsString(integrationRequest);
            this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
            this.roomNumberDeleteRoom.setText("");
            this.priceDeleteRoom.setText("");
            this.capacityDeleteRoom.setText("");
            this.descriptionDeleteRoom.setText("");
            this.isVIPCheckBoxDeleteRoom.setSelected(false);
            IEntity[] parsedAnswer = parseResponse(timer());
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }
        this.response = "";
        jComboBoxRoomDelete.removeItemAt(jComboBoxRoomDelete.getSelectedIndex());
        if (jComboBoxRoomDelete.getItemCount() == 0) {
            deleteRoomButton.setEnabled(false);
        } else {
            deleteRoomButton.setEnabled(true);
        }
    }//GEN-LAST:event_deleteRoomButtonActionPerformed

    private void firstNameUpdateCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameUpdateCustomerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameUpdateCustomerActionPerformed

    private void phoneUpdateCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneUpdateCustomerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneUpdateCustomerActionPerformed

    private void emailUpdateCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailUpdateCustomerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailUpdateCustomerActionPerformed

    private void createCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCustomerButtonActionPerformed
        this.response = "";
        EmailVerifier emailVerifier = new EmailVerifier("Email: ");
        StringVerifier firstVerifier = new StringVerifier("First Name: ");
        StringVerifier phoneVerifier = new StringVerifier("Phone: ");
        StringVerifier passportVerifier = new StringVerifier("Pasport: ");
        StringVerifier secondVerifier = new StringVerifier("Second Name: ");
        CurrentDateVerifier birtdyVerifier = new CurrentDateVerifier("Date Of Birthday: ");
        boolean validBirthday = birtdyVerifier.verify(this.birthDayCreateCustomer);
        boolean firstName = firstVerifier.verify(this.firstNameCreateCustomer);
        boolean phoneValid = phoneVerifier.verify(this.phoneCreateCustomer);
        boolean passportValid = passportVerifier.verify(this.passportCreateCustomer);
        boolean secondValid = secondVerifier.verify(this.secondNameCreateCustomer);
        boolean mailValid = emailVerifier.verify(this.emailCreateCustomer);
        if (validBirthday && mailValid && firstName && phoneValid && passportValid && secondValid) {
            Customer customer = new Customer();
            customer.setPhone_number(this.phoneCreateCustomer.getText());
            customer.setPassport(this.passportCreateCustomer.getText());
            customer.setEmail(this.emailCreateCustomer.getText());
            customer.setDay_of_birth(Date.valueOf(this.birthDayCreateCustomer.getText()));
            customer.setFirst_name(this.firstNameCreateCustomer.getText());
            customer.setSecond_name(this.secondNameCreateCustomer.getText());
            try {
                IntegrationRequest integrationRequest = new IntegrationRequest("Customer", "create", customer);
                String json = this.objectMapper.writeValueAsString(integrationRequest);
                this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
                IEntity[] parsedAnswer = parseResponse(timer());
                this.firstNameCreateCustomer.setText("");
                this.secondNameCreateCustomer.setText("");
                this.birthDayCreateCustomer.setText("");
                this.emailCreateCustomer.setText("");
                this.passportCreateCustomer.setText("");
                this.phoneCreateCustomer.setText("");

            } catch (JsonProcessingException e) {
            }
        }
      
        this.response = "";
    }//GEN-LAST:event_createCustomerButtonActionPerformed

    private void updateCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCustomerButtonActionPerformed
        this.response = "";
        EmailVerifier emailVerifier = new EmailVerifier("Email: ");
        StringVerifier firstVerifier = new StringVerifier("First Name: ");
        StringVerifier phoneVerifier = new StringVerifier("Phone: ");
        StringVerifier passportVerifier = new StringVerifier("Pasport: ");
        StringVerifier secondVerifier = new StringVerifier("Second Name: ");
            
        boolean firstName = firstVerifier.verify(this.firstNameUpdateCustomer);
        boolean phoneValid = phoneVerifier.verify(this.phoneUpdateCustomer);
        boolean passportValid = passportVerifier.verify(this.passportUpdateCustomer);
        boolean secondValid = secondVerifier.verify(this.secondNameUpdateCustomer);
        boolean mailValid = emailVerifier.verify(this.emailUpdateCustomer);
        if (mailValid && firstName && phoneValid && passportValid && secondValid) {
            Customer customer = new Customer();
            customer.setPhone_number(this.phoneUpdateCustomer.getText());
            customer.setPassport(this.passportUpdateCustomer.getText());
            customer.setEmail(this.emailUpdateCustomer.getText());
            customer.setDay_of_birth(Date.valueOf(this.birthDayUpdateCustomer.getText()));
            customer.setFirst_name(this.firstNameUpdateCustomer.getText());
            customer.setSecond_name(this.secondNameUpdateCustomer.getText());
            try {
                IntegrationRequest integrationRequest = new IntegrationRequest("Customer", "updateBySpecificAttribute", customer);
                String json = this.objectMapper.writeValueAsString(integrationRequest);
                this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
                IEntity[] parsedAnswer = parseResponse(timer());
            } catch (JsonProcessingException e) {
            }
        }
   
        this.response = "";
    }//GEN-LAST:event_updateCustomerButtonActionPerformed

    private void firstNameDeleteCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameDeleteCustomerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameDeleteCustomerActionPerformed

    private void deleteCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCustomerButtonActionPerformed
        this.response = "";
        Customer customer = new Customer();
        customer.setPassport(jComboBoxCustomerDeleteCustomer.getItemAt(jComboBoxCustomerDeleteCustomer.getSelectedIndex()).getLabel());
        try {
            IntegrationRequest integrationRequest = new IntegrationRequest("Customer", "deleteBySpecificAtribute", customer);
            String json = this.objectMapper.writeValueAsString(integrationRequest);
            this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
            this.firstNameDeleteCustomer.setText("");
            this.secondNameDeleteCustomer.setText("");
            this.emailDeleteCustomer.setText("");
            this.passportDeleteCustomer.setText("");
            this.birthDayDeleteCustomer.setText("");
            this.phoneDeleteCustomer.setText("");
            IEntity[] parsedAnswer = parseResponse(timer());
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }

        this.response = "";
        jComboBoxCustomerDeleteCustomer.removeItemAt(jComboBoxCustomerDeleteCustomer.getSelectedIndex());
        if (jComboBoxCustomerDeleteCustomer.getItemCount() == 0) {
            deleteCustomerButton.setEnabled(false);
        } else {
            deleteCustomerButton.setEnabled(true);
        }
    }//GEN-LAST:event_deleteCustomerButtonActionPerformed

    private void phoneDeleteCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneDeleteCustomerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneDeleteCustomerActionPerformed

    private void emailDeleteCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailDeleteCustomerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailDeleteCustomerActionPerformed

    private void createReceptionistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createReceptionistButtonActionPerformed
        this.response = "";
        EmailVerifier emailVerifier = new EmailVerifier("Email: ");
        StringVerifier firstVerifier = new StringVerifier("First Name: ");
        StringVerifier phoneVerifier = new StringVerifier("Phone: ");
        StringVerifier passportVerifier = new StringVerifier("Pasport: ");
        StringVerifier secondVerifier = new StringVerifier("Second Name: ");
        CurrentDateVerifier birtdyVerifier = new CurrentDateVerifier("Date Of Birthday: ");
        boolean validBirthday = birtdyVerifier.verify(this.birthDayCreateReceptionist);
        boolean firstName = firstVerifier.verify(this.firstNameCreateReceptionist);
        boolean phoneValid = phoneVerifier.verify(this.phoneCreateReceptionist);
        boolean passportValid = passportVerifier.verify(this.passportCreateReceptionist);
        boolean secondValid = secondVerifier.verify(this.secondNameCreateReceptionist);
        boolean mailValid = emailVerifier.verify(this.emailCreateReceptionist);
        if (validBirthday && mailValid && firstName && phoneValid && passportValid && secondValid) {

            Reception reception = new Reception();
            reception.setSecond_name(this.secondNameCreateReceptionist.getText());
            reception.setFirst_name(this.firstNameCreateReceptionist.getText());
            reception.setPassport(this.passportCreateReceptionist.getText());
            reception.setEmail(this.emailCreateReceptionist.getText());
            reception.setDay_of_birth(Date.valueOf(this.birthDayCreateReceptionist.getText()));
            reception.setPhone_number(this.phoneCreateReceptionist.getText());
            reception.setAddress(this.addressCreateReceptionist.getText());

            try {
                IntegrationRequest integrationRequest = new IntegrationRequest("Reception", "create", reception);
                String json = this.objectMapper.writeValueAsString(integrationRequest);
                this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
                IEntity[] parsedAnswer = parseResponse(timer());
                this.firstNameCreateReceptionist.setText("");
                this.secondNameCreateReceptionist.setText("");
                this.passportCreateReceptionist.setText("");
                this.emailCreateReceptionist.setText("");
                this.birthDayCreateReceptionist.setText("");
                this.phoneCreateReceptionist.setText("");
                this.addressCreateReceptionist.setText("");
            } catch (JsonProcessingException e) {
                e.printStackTrace();
            }
        }

        this.response = "";
    }//GEN-LAST:event_createReceptionistButtonActionPerformed

    private void ShowReceptionistMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowReceptionistMenuButtonActionPerformed
        this.response = "";
        IntegrationRequest integrationRequest = new IntegrationRequest("Reception", "getAll", new Reception());
        try {
            String json = this.objectMapper.writeValueAsString(integrationRequest);
            Object[] columns = new String[]{"First Name", "Second Name", "Passport", "Day Of Birth", "Phone Number", "Email"};
            this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
            Reception[] receptions = (Reception[]) parseResponse(timer());
            if (receptions != null) {
                Object[][] records = new Object[receptions.length][6];

                for (int i = 0; i < receptions.length; i++) {
                    records[i][0] = receptions[i].getFirst_name();
                    records[i][1] = receptions[i].getSecond_name();
                    records[i][2] = receptions[i].getPassport();
                    records[i][3] = receptions[i].getDay_of_birth();
                    records[i][4] = receptions[i].getPhone_number();
                    records[i][5] = receptions[i].getEmail();
                }

                DefaultTableModel model = new DefaultTableModel(records, columns) {
                    public boolean isCellEditable(int row, int col) {
                        return false;
                    }
                };
                jTableReceptions.setModel(model);
            } else {
                Object[][] records = new Object[0][6];
                DefaultTableModel model = new DefaultTableModel(records, columns) {
                    public boolean isCellEditable(int row, int col) {
                        return false;
                    }
                };
                jTableReceptions.setModel(model);
            }

        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }

        this.response = "";
        cardLayoutReception.show(receptionCards, "showReceptionistCard");
    }//GEN-LAST:event_ShowReceptionistMenuButtonActionPerformed

    private void CreateReceptionistMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateReceptionistMenuButtonActionPerformed
        cardLayoutReception.show(receptionCards, "createReceptionistCard");
    }//GEN-LAST:event_CreateReceptionistMenuButtonActionPerformed

    private void UpdateReceptionistMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateReceptionistMenuButtonActionPerformed
        this.response = "";
        try {
           
            IntegrationRequest integrationRequest = new IntegrationRequest("Reception", "getAll", new Reception());
            String json = this.objectMapper.writeValueAsString(integrationRequest);
            this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
            IEntity[] receptions = parseResponse(timer());
            if (receptions != null && receptions.length > 0) {
                jComboBoxRecepcionistUpdate.removeAllItems();
                for (IEntity entity : receptions) {
                    String idReception = entity.getId().toString();
                    String passport = ((Reception) entity).getPassport();
                    jComboBoxRecepcionistUpdate.addItem(new ComboItem(idReception, passport));
                }
                this.updateReceptionistButton.setEnabled(true);
            } else {
                this.updateReceptionistButton.setEnabled(false);
            }
                
          
        } catch (JsonProcessingException e) {
        }


        this.response = "";
        cardLayoutReception.show(receptionCards, "updateReceptionistCard");
    }//GEN-LAST:event_UpdateReceptionistMenuButtonActionPerformed

    private void DeleteReceptionistMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteReceptionistMenuButtonActionPerformed
        this.response = "";
        try {
            IntegrationRequest integrationRequest = new IntegrationRequest("Reception", "getAll", new Reception());
            String json = this.objectMapper.writeValueAsString(integrationRequest);
            this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
            IEntity[] receptions = parseResponse(timer());
            if (receptions != null && receptions.length > 0) {
                jComboBoxReceptionDelete.removeAllItems();
                for (IEntity entity : receptions) {
                    String idReception = entity.getId().toString();
                    String passport = ((Reception) entity).getPassport();
                    jComboBoxReceptionDelete.addItem(new ComboItem(idReception, passport));
                }
                this.deleteReceptionistButton.setEnabled(true);
            } else {
                this.deleteReceptionistButton.setEnabled(false);
            }
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }

        this.response = "";
        cardLayoutReception.show(receptionCards, "deleteReceptionistCard");
    }//GEN-LAST:event_DeleteReceptionistMenuButtonActionPerformed


    private void jComboBoxRoomUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRoomUpdateActionPerformed
        this.response = "";
        ComboItem comboItem = jComboBoxRoomUpdate.getItemAt(jComboBoxRoomUpdate.getSelectedIndex());
        if (comboItem != null) {
            try {
                Room roomTemp = new Room();
                roomTemp.setId(Integer.parseInt(comboItem.getId()));
                IntegrationRequest integrationRequest = new IntegrationRequest("Room", "getById", roomTemp);
                String json = this.objectMapper.writeValueAsString(integrationRequest);
                this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
                IEntity[] rooms = parseResponse(timer());
                if (rooms != null && rooms.length > 0) {
                    Room room = ((Room) rooms[0]);
                    this.roomNumberUpdateRoom.setText(room.getRoom_number().toString());
                    this.priceUpdateRoom.setText(room.getPrice().toString());
                    this.capacityUpdateRoom.setText(room.getCapacity().toString());
                    this.isVIPCheckBoxUpdateRoom.setSelected(room.isVip());
                    this.descriptionUpdateRoom.setText(room.getDescription());
                }
            } catch (JsonProcessingException e) {
                e.printStackTrace();
            }
        }
        this.response = "";
    }//GEN-LAST:event_jComboBoxRoomUpdateActionPerformed

    private void jComboBoxRoomDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRoomDeleteActionPerformed
        this.response = "";
        ComboItem comboItem = jComboBoxRoomDelete.getItemAt(jComboBoxRoomDelete.getSelectedIndex());
        if (comboItem != null) {
            try {
                Room roomTemp = new Room();
                roomTemp.setId(Integer.parseInt(comboItem.getId()));
                IntegrationRequest integrationRequest = new IntegrationRequest("Room", "getById", roomTemp);
                String json = this.objectMapper.writeValueAsString(integrationRequest);
                this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
                IEntity[] rooms = parseResponse(timer());
                if (rooms != null && rooms.length > 0) {
                    Room room = ((Room) rooms[0]);
                    this.roomNumberDeleteRoom.setText(room.getRoom_number().toString());
                    this.priceDeleteRoom.setText(room.getPrice().toString());
                    this.capacityDeleteRoom.setText(room.getCapacity().toString());
                    this.isVIPCheckBoxDeleteRoom.setSelected(room.isVip());
                    this.descriptionDeleteRoom.setText(room.getDescription());
                }
            } catch (JsonProcessingException e) {
                e.printStackTrace();
            }
        }
        this.response = "";
    }//GEN-LAST:event_jComboBoxRoomDeleteActionPerformed

    private void jComboBoxCustomerUpdateCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCustomerUpdateCustomerActionPerformed
        this.response = "";
        ComboItem comboItem = jComboBoxCustomerUpdateCustomer.getItemAt(jComboBoxCustomerUpdateCustomer.getSelectedIndex());
        if (comboItem != null) {
            try {
                Customer customerTemp = new Customer();
                customerTemp.setId(Integer.parseInt(comboItem.getId()));
                IntegrationRequest integrationRequest = new IntegrationRequest("Customer", "getById", customerTemp);
                String json = this.objectMapper.writeValueAsString(integrationRequest);
                this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
                IEntity[] customers = parseResponse(timer());
                if (customers != null && customers.length > 0) {
                    Customer customer = ((Customer) customers[0]);
                    this.firstNameUpdateCustomer.setText(customer.getFirst_name());
                    this.secondNameUpdateCustomer.setText(customer.getSecond_name());
                    this.birthDayUpdateCustomer.setText(customer.getDay_of_birth().toString());
                    this.passportUpdateCustomer.setText(customer.getPassport());
                    this.emailUpdateCustomer.setText(customer.getEmail());
                    this.phoneUpdateCustomer.setText(customer.getPhone_number());
                }
            } catch (JsonProcessingException e) {
                e.printStackTrace();
            }
        }
        this.response = "";
    }//GEN-LAST:event_jComboBoxCustomerUpdateCustomerActionPerformed

    private void jComboBoxCustomerDeleteCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCustomerDeleteCustomerActionPerformed
        this.response = "";
        ComboItem comboItem = jComboBoxCustomerDeleteCustomer.getItemAt(jComboBoxCustomerDeleteCustomer.getSelectedIndex());
        if (comboItem != null) {
            try {
                Customer customerTemp = new Customer();
                customerTemp.setId(Integer.parseInt(comboItem.getId()));
                IntegrationRequest integrationRequest = new IntegrationRequest("Customer", "getById", customerTemp);
                String json = this.objectMapper.writeValueAsString(integrationRequest);
                this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
                IEntity[] customers = parseResponse(timer());
                if (customers != null && customers.length > 0) {
                    Customer customer = ((Customer) customers[0]);
                    this.firstNameDeleteCustomer.setText(customer.getFirst_name());
                    this.secondNameDeleteCustomer.setText(customer.getSecond_name());
                    this.birthDayDeleteCustomer.setText(customer.getDay_of_birth().toString());
                    this.passportDeleteCustomer.setText(customer.getPassport());
                    this.emailDeleteCustomer.setText(customer.getEmail());
                    this.phoneDeleteCustomer.setText(customer.getPhone_number());
                }
            } catch (JsonProcessingException e) {
                e.printStackTrace();
            }
        }
        this.response = "";
    }//GEN-LAST:event_jComboBoxCustomerDeleteCustomerActionPerformed

    private void deleteReservationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteReservationButtonActionPerformed
        this.response = "";
        try {
            Reservation reservation = new Reservation();
            reservation.setId(Integer.parseInt(jComboBoxReservationDelete.getItemAt(jComboBoxReservationDelete.getSelectedIndex()).getLabel()));
            IntegrationRequest integrationRequest = new IntegrationRequest("Reservation", "deleteById", reservation);
            String json = this.objectMapper.writeValueAsString(integrationRequest);
            this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
//            this.checkInDeleteReservation.setText("");
//            this.checkOutDeleteReservation.setText("");
//            this.jTextReservationDeleteCustomerId.setText("");
//            this.jTextReservationDeleteRoomId.setText("");
            IEntity[] parsedAnswer = parseResponse(timer());
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }
        jComboBoxReservationDelete.removeItemAt(jComboBoxReservationDelete.getSelectedIndex());
        ComboItem comboItem = jComboBoxReservationDelete.getItemAt(jComboBoxReservationDelete.getSelectedIndex());
        if (comboItem == null) {
            this.deleteReservationButton.setEnabled(false);
        }

        this.response = "";
    }//GEN-LAST:event_deleteReservationButtonActionPerformed

    private void checkInDeleteReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkInDeleteReservationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkInDeleteReservationActionPerformed

    private void jComboBoxReservationUpdateCustomerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jComboBoxReservationUpdateCustomerPropertyChange

    }//GEN-LAST:event_jComboBoxReservationUpdateCustomerPropertyChange

    private void jComboBoxReservationUpdateCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxReservationUpdateCustomerActionPerformed
        this.response = "";
        ComboItem comboItem = jComboBoxReservationUpdateCustomer.getItemAt(jComboBoxReservationUpdateCustomer.getSelectedIndex());
        if (comboItem != null) {
            try {
                Reservation reservationTemp = new Reservation();
                reservationTemp.setCustomer_id(Integer.parseInt(comboItem.getId()));
                IntegrationRequest integrationRequest = new IntegrationRequest("Reservation", "getBySpecificAttribute", reservationTemp);
                String json = this.objectMapper.writeValueAsString(integrationRequest);
                this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
                IEntity[] reservations = parseResponse(timer());
                if (reservations != null && reservations.length > 0) {
                    jComboxReservationIdUpdateReservation.removeAllItems();
                    for (IEntity reservation : reservations) {
                        jComboxReservationIdUpdateReservation.addItem(new ComboItem(reservation.getId().toString(), reservation.getId().toString()));
                    }
                    jComboxReservationIdUpdateReservation.setEnabled(true);  
                    jComboxReservationIdUpdateReservation.setSelectedIndex(0);
                    updateReservationButton.setEnabled(true);
                } else {
                    updateReservationButton.setEnabled(false);
                    jComboxReservationIdUpdateReservation.removeAllItems();
                    this.jCustomerUpdateText.setText("");
                    this.checkInUpdateReservation.setText("");
                    this.checkOutUpdateReservation.setText("");
                    this.chooserCheckOutUpdateReservation.setEnabled(false);
                    this.chooserCheckInUpdateReservation.setEnabled(false);
                    this.checkInUpdateReservation.setEnabled(false);
                    this.checkOutUpdateReservation.setEnabled(false);
                    this.jComboBoxSelectRoomUpdateReservation.setEnabled(false);
                    jComboxReservationIdUpdateReservation.setEnabled(false);
                }
                this.response = "";
                ComboItem comboItemTemp = jComboBoxReservationUpdateCustomer.getItemAt(jComboBoxReservationUpdateCustomer.getSelectedIndex());
                if (comboItemTemp != null && reservations != null && reservations.length > 0) {
                    jCustomerUpdateText.setText(comboItemTemp.getLabel());
                }
            } catch (JsonProcessingException e) {
            }
        }
    }//GEN-LAST:event_jComboBoxReservationUpdateCustomerActionPerformed

    private void jCustomerUpdateTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCustomerUpdateTextActionPerformed

    }//GEN-LAST:event_jCustomerUpdateTextActionPerformed

    private void jComboBoxSelectRoomUpdateReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSelectRoomUpdateReservationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxSelectRoomUpdateReservationActionPerformed

    private void chooserCheckOutUpdateReservationPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_chooserCheckOutUpdateReservationPropertyChange
        if ("date".equals(evt.getPropertyName())) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
            String date = sdf.format(chooserCheckOutUpdateReservation.getDate());
            if (!date.equals(checkOutUpdateReservation.getSelectedText())) {
                checkOutUpdateReservation.setText(date);
                CurrentDateVerifier currentDateVerifier = new CurrentDateVerifier("Check Out: ");
                boolean isValidCheckOut = currentDateVerifier.verify(this.checkOutUpdateReservation);
                if(!isValidCheckOut){
                    LocalDate d = LocalDate.now();
                    java.util.Date currDate = java.util.Date.from(d.atStartOfDay(ZoneId.systemDefault()).toInstant());
                    String currDate1 = sdf.format(currDate);
                    checkOutUpdateReservation.setText(currDate1);
                }
            }
        }
    }//GEN-LAST:event_chooserCheckOutUpdateReservationPropertyChange

    private void chooserCheckInUpdateReservationPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_chooserCheckInUpdateReservationPropertyChange
        if ("date".equals(evt.getPropertyName())) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
            String date = sdf.format(chooserCheckInUpdateReservation.getDate());
            if (!date.equals(checkInUpdateReservation.getSelectedText())) {
                checkInUpdateReservation.setText(date);
                CurrentDateVerifier currentDateVerifier = new CurrentDateVerifier("Check In");
                boolean isValidCheckIn = currentDateVerifier.verify(this.checkInUpdateReservation);
                if(!isValidCheckIn){
                    LocalDate d = LocalDate.now();
                    java.util.Date currDate = java.util.Date.from(d.atStartOfDay(ZoneId.systemDefault()).toInstant());
                    String currDate1 = sdf.format(currDate);
                    checkInUpdateReservation.setText(currDate1);
                }
            }
        }
    }//GEN-LAST:event_chooserCheckInUpdateReservationPropertyChange

    private void updateReservationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateReservationButtonActionPerformed
        this.response = "";
        ComboItem comboItem = jComboxReservationIdUpdateReservation.getItemAt(jComboxReservationIdUpdateReservation.getSelectedIndex());
        if (comboItem != null) {
            try {
                CurrentDateVerifier checkInVerifier = new CurrentDateVerifier("Check In: ");
                CurrentDateVerifier checkOutVerifier = new CurrentDateVerifier("Check out: ");
                checkInVerifier.verify(this.checkInUpdateReservation);
                checkOutVerifier.verify(this.checkOutUpdateReservation);
                Date checkIn = Date.valueOf(this.checkInUpdateReservation.getText());
                Date checkOut = Date.valueOf(this.checkOutUpdateReservation.getText());
                if (checkIn.after(checkOut)) {
                    JOptionPane.showMessageDialog(this.checkInUpdateReservation, "CheckIn is after CheckOut.", "Error Dialog",
                            JOptionPane.ERROR_MESSAGE);
                } else {
                    String roomId = jComboBoxSelectRoomUpdateReservation.getItemAt(jComboBoxSelectRoomUpdateReservation.getSelectedIndex()).getId();
                    String customerId = jComboBoxReservationUpdateCustomer.getItemAt(jComboBoxReservationUpdateCustomer.getSelectedIndex()).getId();
                    Reservation reservation = new Reservation();
                    reservation.setId(Integer.parseInt(comboItem.getId()));
                    reservation.setRoom_id(Integer.parseInt(roomId));
                    reservation.setCustomer_id(Integer.parseInt(customerId));
                    reservation.setCheck_in(Date.valueOf(this.checkInUpdateReservation.getText()));
                    reservation.setCheck_out(Date.valueOf(this.checkOutUpdateReservation.getText()));
                    IntegrationRequest integrationRequest = new IntegrationRequest("Reservation", "updateById", reservation);
                    String json = this.objectMapper.writeValueAsString(integrationRequest);
                    this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
                    IEntity[] parsedAnswer = parseResponse(timer());
                }


            } catch (Exception e) {
               
            }  
        }

        this.response = "";
    }//GEN-LAST:event_updateReservationButtonActionPerformed

    private void checkInUpdateReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkInUpdateReservationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkInUpdateReservationActionPerformed

    private void jComboBoxSelectCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSelectCustomerActionPerformed

    }//GEN-LAST:event_jComboBoxSelectCustomerActionPerformed

    private void jDateChooser2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser2PropertyChange
        if ("date".equals(evt.getPropertyName())) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
            String date = sdf.format(jDateChooser2.getDate());
            if (!date.equals(chechOutCreateReservation.getSelectedText())) {
                chechOutCreateReservation.setText(date);
                CurrentDateVerifier currentDateVerifier = new CurrentDateVerifier("Check Out: ");
                boolean isValidCheckOut = currentDateVerifier.verify(this.chechOutCreateReservation);
                if(!isValidCheckOut){
                    LocalDate d = LocalDate.now();
                    java.util.Date currDate = java.util.Date.from(d.atStartOfDay(ZoneId.systemDefault()).toInstant());
                    String currDate1 = sdf.format(currDate);
                    chechOutCreateReservation.setText(currDate1);
                }
            }
        }
    }//GEN-LAST:event_jDateChooser2PropertyChange

    private void jDateChooser1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser1PropertyChange
        if ("date".equals(evt.getPropertyName())) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
            String date = sdf.format(jDateChooser1.getDate());
            if (!date.equals(chechInCreateReservation.getSelectedText())) {
                chechInCreateReservation.setText(date);
            }
            CurrentDateVerifier currentDateVerifier = new CurrentDateVerifier("Check In: ");
            boolean isValidCheckIn = currentDateVerifier.verify(this.chechInCreateReservation);
            if(!isValidCheckIn){
                LocalDate d = LocalDate.now();
                java.util.Date currDate = java.util.Date.from(d.atStartOfDay(ZoneId.systemDefault()).toInstant());
                String currDate1 = sdf.format(currDate);
                chechInCreateReservation.setText(currDate1);
            }
        }
    }//GEN-LAST:event_jDateChooser1PropertyChange

    private void createReservationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createReservationButtonActionPerformed
        this.response = "";

        try {
            CurrentDateVerifier currentDateVerifierIn = new CurrentDateVerifier("Check In: "); 
            CurrentDateVerifier currentDateVerifierOut = new CurrentDateVerifier("Check Out: ");
            boolean isValidCheckIn = currentDateVerifierIn.verify(this.chechInCreateReservation);
            boolean isValidCheckOut = currentDateVerifierOut.verify(this.chechOutCreateReservation);
            Date checkIn = Date.valueOf(this.chechInCreateReservation.getText());
            Date checkOut = Date.valueOf(this.chechOutCreateReservation.getText());
            if (checkIn.after(checkOut)) {
                JOptionPane.showMessageDialog(this.chechInCreateReservation, "CheckIn is after CheckOut.", "Error Dialog",
                        JOptionPane.ERROR_MESSAGE);
            }
            if (!checkIn.after(checkOut) && isValidCheckIn && isValidCheckOut) {
                String roomId = jComboBoxReservationCreateRoom.getItemAt(jComboBoxReservationCreateRoom.getSelectedIndex()).getId();
                String customerId = jComboBoxSelectCustomer.getItemAt(jComboBoxSelectCustomer.getSelectedIndex()).getId();
                Reservation reservation = new Reservation();
                reservation.setRoom_id(Integer.parseInt(roomId));
                reservation.setCustomer_id(Integer.parseInt(customerId));
                reservation.setCheck_in(Date.valueOf(this.chechInCreateReservation.getText()));
                reservation.setCheck_out(Date.valueOf(this.chechOutCreateReservation.getText()));
                IntegrationRequest integrationRequest = new IntegrationRequest("Reservation", "create", reservation);
                String json = this.objectMapper.writeValueAsString(integrationRequest);
                this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
                IEntity[] parsedAnswer = parseResponse(timer());
            }
            jComboBoxReservationCreateRoom.removeItemAt(jComboBoxReservationCreateRoom.getSelectedIndex());
            ComboItem comboItem = jComboBoxReservationCreateRoom.getItemAt(jComboBoxReservationCreateRoom.getSelectedIndex());
            if (comboItem == null) {
                this.createReservationButton.setEnabled(false);
            } else {
                this.createReservationButton.setEnabled(true);
            }
          
        } catch (Exception e) {
        }

        this.response = "";
    }//GEN-LAST:event_createReservationButtonActionPerformed

    private void chechInCreateReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chechInCreateReservationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chechInCreateReservationActionPerformed

    private void DeleteReservationMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteReservationMenuButtonActionPerformed
        this.response = "";
        try {
            IntegrationRequest integrationRequest = new IntegrationRequest("Customer", "getAll", new Customer());
            String json = this.objectMapper.writeValueAsString(integrationRequest);

            this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
            IEntity[] customers = parseResponse(timer());
            if (customers != null && customers.length > 0) {
                jComboBoxSelectCustomerDeleteReservation.removeAllItems();
                for (IEntity entity : customers) {
                    String idCustomer = entity.getId().toString();
                    String passport = ((Customer) entity).getPassport();
                    jComboBoxSelectCustomerDeleteReservation.addItem(new ComboItem(idCustomer, passport));
                }
            }
            ComboItem comboItem = jComboBoxReservationDelete.getItemAt(jComboBoxReservationDelete.getSelectedIndex());
            if (comboItem == null) {
                this.deleteReservationButton.setEnabled(false);
            } else {
                this.deleteReservationButton.setEnabled(true);
            }
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }
        this.response = "";
        cardLayoutReservation.show(reservationCards, "deleteReservationCard");

    }//GEN-LAST:event_DeleteReservationMenuButtonActionPerformed

    private void UpdateReservationMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateReservationMenuButtonActionPerformed
        this.response = "";
        try {

            IntegrationRequest integrationRequest = new IntegrationRequest("Room", "getAll", new Room());
            String json = this.objectMapper.writeValueAsString(integrationRequest);
            this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
            IEntity[] rooms = parseResponse(timer());
            if (rooms != null && rooms.length > 0) {
                jComboBoxSelectRoomUpdateReservation.removeAllItems();
                for (IEntity entity : rooms) {
                    String idRoom = entity.getId().toString();
                    String roomNumber = ((Room) entity).getRoom_number().toString();
                    jComboBoxSelectRoomUpdateReservation.addItem(new ComboItem(idRoom, roomNumber));
                }
            }

            this.response = "";
            integrationRequest = new IntegrationRequest("Customer", "getAll", new Customer());
            json = this.objectMapper.writeValueAsString(integrationRequest);
            this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
            IEntity[] customers = parseResponse(timer());
            if (customers != null && customers.length > 0) {
                jComboBoxReservationUpdateCustomer.removeAllItems();
                for (IEntity entity : customers) {
                    String idCustomer = entity.getId().toString();
                    String passport = ((Customer) entity).getPassport();
                    jComboBoxReservationUpdateCustomer.addItem(new ComboItem(idCustomer, passport));
                }
            }
            
        } catch (Exception e) {
        }
        ComboItem comboItem = jComboxReservationIdUpdateReservation.getItemAt(jComboxReservationIdUpdateReservation.getSelectedIndex());
        if (comboItem == null) {
            this.updateReservationButton.setEnabled(false);
        } else {
             this.updateReservationButton.setEnabled(true);
        }
        this.response = "";

        cardLayoutReservation.show(reservationCards, "updateReservationCard");
    }//GEN-LAST:event_UpdateReservationMenuButtonActionPerformed

    private void ShowReservationsMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowReservationsMenuButtonActionPerformed
        this.response = "";
        try {
            IntegrationRequest integrationRequest = new IntegrationRequest("Reservation", "getAll", new Reservation());
            String json = this.objectMapper.writeValueAsString(integrationRequest);
            Object[] columns = new String[]{"Reservation Id", "Check In", "Check Out", "Customer Passport", "Room Number"};

            this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
            Reservation[] reservations = (Reservation[]) parseResponse(timer());
            if (reservations != null) {
                Object[][] records = new Object[reservations.length][5];
                for (int i = 0; i < reservations.length; i++) {
                    records[i][0] = reservations[i].getId();
                    records[i][1] = reservations[i].getCheck_in();
                    records[i][2] = reservations[i].getCheck_out();
                    records[i][3] = reservations[i].getCustomerpassport();
                    records[i][4] = reservations[i].getRoomnumber();
                }

                DefaultTableModel model = new DefaultTableModel(records, columns) {
                    public boolean isCellEditable(int row, int col) {
                        return false;
                    }
                };
                jTableReservation.setModel(model);
            } else {
                Object[][] records = new Object[0][5];
                DefaultTableModel model = new DefaultTableModel(records, columns) {
                    public boolean isCellEditable(int row, int col) {
                        return false;
                    }
                };
                jTableReservation.setModel(model);
            }
        } catch (JsonProcessingException e) {
        }

        this.response = "";
        cardLayoutReservation.show(reservationCards, "showReservationCard");
    }//GEN-LAST:event_ShowReservationsMenuButtonActionPerformed

    private void CreateReservationMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateReservationMenuButtonActionPerformed
        this.response = "";
        try {
            IntegrationRequest integrationRequest = new IntegrationRequest("Customer", "getAll", new Customer());
            String json = this.objectMapper.writeValueAsString(integrationRequest);
            this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
            IEntity[] customers = parseResponse(timer());
            if (customers != null && customers.length > 0) {
                jComboBoxSelectCustomer.removeAllItems();
                for (IEntity entity : customers) {
                    String idCustomer = entity.getId().toString();
                    String passport = ((Customer) entity).getPassport();
                    jComboBoxSelectCustomer.addItem(new ComboItem(idCustomer, passport));
                }
            }

            this.response = "";

//            integrationRequest = new IntegrationRequest("Room", "getAll", new Room());
//            json = this.objectMapper.writeValueAsString(integrationRequest);
//            this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
//            IEntity[] rooms = parseResponse(timer());
//            if (rooms != null && rooms.length > 0) {
//                jComboBoxReservationCreateRoom.removeAllItems();
//                for (IEntity entity : rooms) {
//                    String idRoom = entity.getId().toString();
//                    String roomNumber = ((Room) entity).getRoom_number().toString();
//                    jComboBoxReservationCreateRoom.addItem(new ComboItem(idRoom, roomNumber));
//                }
//            }
        } catch (JsonProcessingException e) {
         
        }
        this.response = "";
        cardLayoutReservation.show(reservationCards, "createReservationCard");
    }//GEN-LAST:event_CreateReservationMenuButtonActionPerformed

    private void jButtonGetPossibleRoomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGetPossibleRoomsActionPerformed
        this.response = "";
        try {
            Reservation reservation = new Reservation();
            CurrentDateVerifier currentDateVerifierIn = new CurrentDateVerifier("Check In: "); 
            CurrentDateVerifier currentDateVerifierOut = new CurrentDateVerifier("Check Out: ");
            boolean isValidCheckIn = currentDateVerifierIn.verify(this.chechInCreateReservation);
            boolean isValidCheckOut = currentDateVerifierOut.verify(this.chechOutCreateReservation);
            Date checkIn = Date.valueOf(this.chechInCreateReservation.getText());
            Date checkOut = Date.valueOf(this.chechOutCreateReservation.getText());
            if (checkIn.after(checkOut)) {
                JOptionPane.showMessageDialog(this.chechInCreateReservation, "CheckIn is after CheckOut.", "Error Dialog",
                        JOptionPane.ERROR_MESSAGE);
            }
            if (!checkIn.after(checkOut) && isValidCheckIn && isValidCheckOut) {
                reservation.setCheck_in(Date.valueOf(this.chechInCreateReservation.getText()));
                reservation.setCheck_out(Date.valueOf(this.chechOutCreateReservation.getText()));
                IntegrationRequest integrationRequest = new IntegrationRequest("Reservation", "getFreeRooms", reservation);
                String json = this.objectMapper.writeValueAsString(integrationRequest);
                this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));

                IEntity[] rooms = parseResponse(timer());
                if (rooms != null && rooms.length > 0) {
                    jComboBoxReservationCreateRoom.removeAllItems();
                    for (IEntity room : rooms) {
                        jComboBoxReservationCreateRoom.addItem(new ComboItem(room.getId().toString(), ((Room) room).getRoom_number().toString()));
                    }
                } else {
                    jComboBoxReservationCreateRoom.removeAllItems();
                    createReservationButton.setEnabled(false);
                }
                if (jComboBoxReservationCreateRoom.getItemCount() > 0) {
                    jComboBoxReservationCreateRoom.setEnabled(true);
                    createReservationButton.setEnabled(true);
                } else {
                    jComboBoxReservationCreateRoom.setEnabled(false);
                    createReservationButton.setEnabled(false);
                }
            }
          
        } catch (Exception e) {
        }

        this.response = "";
    }//GEN-LAST:event_jButtonGetPossibleRoomsActionPerformed

    private void jTextReservationDeleteCustomerIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextReservationDeleteCustomerIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextReservationDeleteCustomerIdActionPerformed

    private void jComboBoxReservationDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxReservationDeleteActionPerformed
        this.response = "";
        ComboItem comboItem = jComboBoxReservationDelete.getItemAt(jComboBoxReservationDelete.getSelectedIndex());
        if (comboItem != null) {
            try {
                Reservation reservationTemp = new Reservation();
                reservationTemp.setId(Integer.parseInt(comboItem.getId()));
                IntegrationRequest integrationRequest = new IntegrationRequest("Reservation", "getById", reservationTemp);
                String json = this.objectMapper.writeValueAsString(integrationRequest);
                this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
                IEntity[] reservations = parseResponse(timer());
                if (reservations != null && reservations.length > 0) {
                    Reservation reservation = ((Reservation) reservations[0]);
                    this.checkInDeleteReservation.setText(reservation.getCheck_in().toString());
                    this.checkOutDeleteReservation.setText(reservation.getCheck_out().toString());
                    this.jTextReservationDeleteCustomerId.setText(reservation.getCustomerpassport());
                    this.jTextReservationDeleteRoomId.setText(reservation.getRoomnumber());
                    deleteReservationButton.setEnabled(true);
                } else {
                    deleteReservationButton.setEnabled(false);
                }
            } catch (JsonProcessingException e) {
                e.printStackTrace();
            }

        }
        this.response = "";
    }//GEN-LAST:event_jComboBoxReservationDeleteActionPerformed

    private void addressUpdateReceptionistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressUpdateReceptionistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addressUpdateReceptionistActionPerformed

    private void emailUpdateReceptionistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailUpdateReceptionistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailUpdateReceptionistActionPerformed

    private void phoneUpdateReceptionistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneUpdateReceptionistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneUpdateReceptionistActionPerformed

    private void updateReceptionistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateReceptionistButtonActionPerformed
        this.response = "";
        this.passportUpdateReceptionist.setEditable(false);
        EmailVerifier emailVerifier = new EmailVerifier("Email: ");
        StringVerifier firstVerifier = new StringVerifier("First Name: ");
        StringVerifier phoneVerifier = new StringVerifier("Phone: ");
        StringVerifier passportVerifier = new StringVerifier("Pasport: ");
        StringVerifier secondVerifier = new StringVerifier("Second Name: ");
        boolean firstName = firstVerifier.verify(this.firstNameUpdateReceptionist);
        boolean phoneValid = phoneVerifier.verify(this.phoneUpdateReceptionist);
        boolean passportValid = passportVerifier.verify(this.passportUpdateReceptionist);
        boolean secondValid = secondVerifier.verify(this.secondNameUpdateReceptionist);
        boolean mailValid = emailVerifier.verify(this.emailUpdateReceptionist);
        if (mailValid && firstName && phoneValid && passportValid && secondValid) {
            try {
                Reception reception = new Reception();
                reception.setFirst_name(this.firstNameUpdateReceptionist.getText());
                reception.setSecond_name(this.secondNameUpdateReceptionist.getText());
                reception.setEmail(this.emailUpdateReceptionist.getText());
                reception.setPassport(this.passportUpdateReceptionist.getText());
                reception.setDay_of_birth(Date.valueOf(this.birthDayUpdateReceptionist.getText()));
                reception.setPhone_number(this.phoneUpdateReceptionist.getText());
                reception.setAddress(this.addressUpdateReceptionist.getText());
                IntegrationRequest integrationRequest = new IntegrationRequest("Reception", "updateBySpecificAttribute", reception);
                String json = this.objectMapper.writeValueAsString(integrationRequest);
                this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
                IEntity[] parsedAnswer = parseResponse(timer());
            } catch (JsonProcessingException e) {
            }
        }

        this.response = "";
    }//GEN-LAST:event_updateReceptionistButtonActionPerformed

    private void firstNameUpdateReceptionistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameUpdateReceptionistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameUpdateReceptionistActionPerformed

    private void jComboBoxRecepcionistUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRecepcionistUpdateActionPerformed
        this.response = "";
        ComboItem comboItem = jComboBoxRecepcionistUpdate.getItemAt(jComboBoxRecepcionistUpdate.getSelectedIndex());
        if (comboItem != null) {
            try {
                Reception receptionTemp = new Reception();
                receptionTemp.setId(Integer.parseInt(comboItem.getId()));
                IntegrationRequest integrationRequest = new IntegrationRequest("Reception", "getById", receptionTemp);
                String json = this.objectMapper.writeValueAsString(integrationRequest);
                this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
                IEntity[] receptions = parseResponse(timer());
                if (receptions != null && receptions.length > 0) {
                    Reception reception = ((Reception) receptions[0]);
                    this.firstNameUpdateReceptionist.setText(reception.getFirst_name());
                    this.secondNameUpdateReceptionist.setText(reception.getSecond_name());
                    this.birthDayUpdateReceptionist.setText(reception.getDay_of_birth().toString());
                    this.passportUpdateReceptionist.setText(reception.getPassport());
                    this.emailUpdateReceptionist.setText(reception.getEmail());
                    this.phoneUpdateReceptionist.setText(reception.getPhone_number());
                    this.addressUpdateReceptionist.setText(reception.getAddress());
                }
            } catch (JsonProcessingException e) {
                e.printStackTrace();
            }
        }
        this.response = "";
    }//GEN-LAST:event_jComboBoxRecepcionistUpdateActionPerformed

    private void addressDeleteReceptionistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressDeleteReceptionistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addressDeleteReceptionistActionPerformed

    private void emailDeleteReceptionistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailDeleteReceptionistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailDeleteReceptionistActionPerformed

    private void phoneDeleteReceptionistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneDeleteReceptionistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneDeleteReceptionistActionPerformed

    private void deleteReceptionistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteReceptionistButtonActionPerformed
        this.response = "";
        try {
            Reception reception = new Reception();
            reception.setPassport(jComboBoxReceptionDelete.getItemAt(jComboBoxReceptionDelete.getSelectedIndex()).getLabel());
            IntegrationRequest integrationRequest = new IntegrationRequest("Reception", "deleteBySpecificAtribute", reception);
            String json = this.objectMapper.writeValueAsString(integrationRequest);
            this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
            this.firstNameDeleteReceptionist.setText("");
            this.secondNameDeleteReceptionist.setText("");
            this.emailDeleteReceptionist.setText("");
            this.passportDeleteReceptionist.setText("");
            this.birthDayDeleteReceptionist.setText("");
            this.phoneDeleteReceptionist.setText("");
            this.addressDeleteReceptionist.setText("");
            IEntity[] parsedAnswer = parseResponse(timer());
            
        } catch (JsonProcessingException e) {
        }

        this.response = "";
        jComboBoxReceptionDelete.removeItemAt(jComboBoxReceptionDelete.getSelectedIndex());
        if (jComboBoxReceptionDelete.getItemCount() == 0) {
            deleteReceptionistButton.setEnabled(false);
        } else {
            deleteReceptionistButton.setEnabled(true);
        }

    }//GEN-LAST:event_deleteReceptionistButtonActionPerformed

    private void firstNameDeleteReceptionistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameDeleteReceptionistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameDeleteReceptionistActionPerformed

    private void jComboBoxReceptionDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxReceptionDeleteActionPerformed
        this.response = "";
        ComboItem comboItem = jComboBoxReceptionDelete.getItemAt(jComboBoxReceptionDelete.getSelectedIndex());
        if (comboItem != null) {
            try {
                Reception receptionTemp = new Reception();
                receptionTemp.setId(Integer.parseInt(comboItem.getId()));
                IntegrationRequest integrationRequest = new IntegrationRequest("Reception", "getById", receptionTemp);
                String json = this.objectMapper.writeValueAsString(integrationRequest);
                this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
                IEntity[] receptions = parseResponse(timer());
                if (receptions != null && receptions.length > 0) {
                    Reception reception = ((Reception) receptions[0]);
                    this.firstNameDeleteReceptionist.setText(reception.getFirst_name());
                    this.secondNameDeleteReceptionist.setText(reception.getSecond_name());
                    this.birthDayDeleteReceptionist.setText(reception.getDay_of_birth().toString());
                    this.passportDeleteReceptionist.setText(reception.getPassport());
                    this.emailDeleteReceptionist.setText(reception.getEmail());
                    this.phoneDeleteReceptionist.setText(reception.getPhone_number());
                    this.addressDeleteReceptionist.setText(reception.getAddress());
                }
            } catch (JsonProcessingException e) {
                e.printStackTrace();
            }
        }
        this.response = "";
    }//GEN-LAST:event_jComboBoxReceptionDeleteActionPerformed

    private void jComboxReservationIdUpdateReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboxReservationIdUpdateReservationActionPerformed
        this.response = "";
        ComboItem comboItem = jComboxReservationIdUpdateReservation.getItemAt(jComboxReservationIdUpdateReservation.getSelectedIndex());
        if (comboItem != null) {
            try {
                Reservation reservation = new Reservation();
                reservation.setId(Integer.parseInt(comboItem.getId()));
                IntegrationRequest integrationRequest = new IntegrationRequest("Reservation", "getById", reservation);
                String json = this.objectMapper.writeValueAsString(integrationRequest);
                this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
                IEntity[] reservations = parseResponse(timer());
                if (reservations != null && reservations.length > 0) {
                    this.checkInUpdateReservation.setText(((Reservation) reservations[0]).getCheck_in().toString());
                    this.checkOutUpdateReservation.setText(((Reservation) reservations[0]).getCheck_out().toString());
                    for (int i = 0; i < jComboBoxSelectRoomUpdateReservation.getItemCount(); i++) {
                        if (jComboBoxSelectRoomUpdateReservation.getItemAt(i).getId().equals(((Reservation) reservations[0]).getRoom_id().toString())) {
                            jComboBoxSelectRoomUpdateReservation.setSelectedIndex(i);
                            break;
                        }
                    }
                    this.checkInUpdateReservation.setEnabled(true);
                    this.checkOutUpdateReservation.setEnabled(true);
                    this.chooserCheckOutUpdateReservation.setEnabled(true);
                    this.chooserCheckInUpdateReservation.setEnabled(true);
                    this.jComboBoxSelectRoomUpdateReservation.setEnabled(true);
                    updateReservationButton.setEnabled(true);
                } else {
                    updateReservationButton.setEnabled(false);
                    this.checkInUpdateReservation.setEnabled(false);
                    this.checkOutUpdateReservation.setEnabled(false);
                    this.chooserCheckOutUpdateReservation.setEnabled(false);
                    this.chooserCheckInUpdateReservation.setEnabled(false);
                    this.jComboBoxSelectRoomUpdateReservation.setEnabled(false);
                }
            } catch (JsonProcessingException e) {
                e.printStackTrace();
            }
        }
        this.response = "";
    }//GEN-LAST:event_jComboxReservationIdUpdateReservationActionPerformed

    private void jComboBoxSelectCustomerDeleteReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSelectCustomerDeleteReservationActionPerformed
        this.response = "";
        ComboItem comboItem = jComboBoxSelectCustomerDeleteReservation.getItemAt(jComboBoxSelectCustomerDeleteReservation.getSelectedIndex());
        if (comboItem != null) {
            try {
                Reservation reservationTemp = new Reservation();
                reservationTemp.setCustomer_id(Integer.parseInt(comboItem.getId()));
                IntegrationRequest integrationRequest = new IntegrationRequest("Reservation", "getBySpecificAttribute", reservationTemp);
                String json = this.objectMapper.writeValueAsString(integrationRequest);
                this.channelHandlerContext.writeAndFlush(Unpooled.copiedBuffer(json, CharsetUtil.UTF_8));
                IEntity[] reservations = parseResponse(timer());
                if (reservations != null && reservations.length > 0) {
                    jComboBoxReservationDelete.removeAllItems();
                    for (IEntity reservation : reservations) {
                        jComboBoxReservationDelete.addItem(new ComboItem(reservation.getId().toString(), reservation.getId().toString()));
                    }
                    jComboBoxReservationDelete.setEnabled(true);
                    deleteReservationButton.setEnabled(true);
                    jTextReservationDeleteCustomerId.setText(jComboBoxSelectCustomerDeleteReservation.getItemAt(jComboBoxSelectCustomerDeleteReservation.getSelectedIndex()).getLabel());
                } else {
                    deleteReservationButton.setEnabled(false);
                    jComboBoxReservationDelete.removeAllItems();
                    this.checkInDeleteReservation.setText("");
                    this.checkOutDeleteReservation.setText("");
                    this.jTextReservationDeleteCustomerId.setText("");
                    this.jTextReservationDeleteRoomId.setText("");
                    this.jComboBoxReservationDelete.setEnabled(false);
                }
            } catch (JsonProcessingException e) {
                e.printStackTrace();
            }

        }
        this.response = "";
    }//GEN-LAST:event_jComboBoxSelectCustomerDeleteReservationActionPerformed

    private void chechOutCreateReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chechOutCreateReservationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chechOutCreateReservationActionPerformed

    private void jDateChooserCustomerBithdayCreateCutomerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooserCustomerBithdayCreateCutomerPropertyChange
        if ("date".equals(evt.getPropertyName())) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
            String date = sdf.format(jDateChooserCustomerBithdayCreateCutomer.getDate());
            if (!date.equals(birthDayCreateCustomer.getSelectedText())) {
                birthDayCreateCustomer.setText(date);
            }
        }
    }//GEN-LAST:event_jDateChooserCustomerBithdayCreateCutomerPropertyChange

    private void jDateChooserBirthDayReceptionistCreateReceptionistPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooserBirthDayReceptionistCreateReceptionistPropertyChange
        if ("date".equals(evt.getPropertyName())) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
            String date = sdf.format(jDateChooserBirthDayReceptionistCreateReceptionist.getDate());
            if (!date.equals(birthDayCreateReceptionist.getSelectedText())) {
                birthDayCreateReceptionist.setText(date);
            }
        }
    }//GEN-LAST:event_jDateChooserBirthDayReceptionistCreateReceptionistPropertyChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreateCustomerMenuButton;
    private javax.swing.JButton CreateReceptionistMenuButton;
    private javax.swing.JButton CreateReservationMenuButton;
    private javax.swing.JButton CreateRoomMenuButton;
    private javax.swing.JPanel CustomerPanel;
    private javax.swing.JButton DeleteCustomerMenuButton;
    private javax.swing.JButton DeleteReceptionistMenuButton;
    private javax.swing.JButton DeleteReservationMenuButton;
    private javax.swing.JButton DeleteRoomMenuButton;
    private javax.swing.JPanel Menu;
    private javax.swing.JPanel ReceptionPanel;
    private javax.swing.JPanel ReservationPanel;
    private javax.swing.JPanel RoomPanel;
    private javax.swing.JButton ShowCustomersMenuButton;
    private javax.swing.JButton ShowReceptionistMenuButton;
    private javax.swing.JButton ShowReservationsMenuButton;
    private javax.swing.JButton ShowRoomsMenuButton;
    private javax.swing.JButton UpdateCustomerMenuButton;
    private javax.swing.JButton UpdateReceptionistMenuButton;
    private javax.swing.JButton UpdateReservationMenuButton;
    private javax.swing.JButton UpdateRoomMenuButton;
    private javax.swing.JTextField addressCreateReceptionist;
    private javax.swing.JTextField addressDeleteReceptionist;
    private javax.swing.JTextField addressUpdateReceptionist;
    private javax.swing.JTextField birthDayCreateCustomer;
    private javax.swing.JTextField birthDayCreateReceptionist;
    private javax.swing.JTextField birthDayDeleteCustomer;
    private javax.swing.JTextField birthDayDeleteReceptionist;
    private javax.swing.JTextField birthDayUpdateCustomer;
    private javax.swing.JTextField birthDayUpdateReceptionist;
    private javax.swing.JTextField capacityCreateRoom;
    private javax.swing.JTextField capacityDeleteRoom;
    private javax.swing.JTextField capacityUpdateRoom;
    private javax.swing.JTextField chechInCreateReservation;
    private javax.swing.JTextField chechOutCreateReservation;
    private javax.swing.JTextField checkInDeleteReservation;
    private javax.swing.JTextField checkInUpdateReservation;
    private javax.swing.JTextField checkOutDeleteReservation;
    private javax.swing.JTextField checkOutUpdateReservation;
    private com.toedter.calendar.JDateChooser chooserCheckInUpdateReservation;
    private com.toedter.calendar.JDateChooser chooserCheckOutUpdateReservation;
    private javax.swing.JButton createCustomerButton;
    private javax.swing.JPanel createCustomerCard;
    private javax.swing.JButton createReceptionistButton;
    private javax.swing.JPanel createReceptionistCard;
    private javax.swing.JButton createReservationButton;
    private javax.swing.JPanel createReservationCard;
    private javax.swing.JButton createRoomButton;
    private javax.swing.JPanel createRoomCard;
    private javax.swing.JPanel customerCard;
    private javax.swing.JPanel customerCards;
    private javax.swing.JButton customerManagerButton1;
    private javax.swing.JButton deleteCustomerButton;
    private javax.swing.JPanel deleteCustomerCard;
    private javax.swing.JButton deleteReceptionistButton;
    private javax.swing.JPanel deleteReceptionistCard;
    private javax.swing.JButton deleteReservationButton;
    private javax.swing.JPanel deleteReservationCard;
    private javax.swing.JButton deleteRoomButton;
    private javax.swing.JPanel deleteRoomCard;
    private javax.swing.JTextField descriptionCreateRoom;
    private javax.swing.JTextField descriptionDeleteRoom;
    private javax.swing.JTextField descriptionUpdateRoom;
    private javax.swing.JTextField emailCreateCustomer;
    private javax.swing.JTextField emailCreateReceptionist;
    private javax.swing.JTextField emailDeleteCustomer;
    private javax.swing.JTextField emailDeleteReceptionist;
    private javax.swing.JTextField emailUpdateCustomer;
    private javax.swing.JTextField emailUpdateReceptionist;
    private javax.swing.JTextField firstNameCreateCustomer;
    private javax.swing.JTextField firstNameCreateReceptionist;
    private javax.swing.JTextField firstNameDeleteCustomer;
    private javax.swing.JTextField firstNameDeleteReceptionist;
    private javax.swing.JTextField firstNameUpdateCustomer;
    private javax.swing.JTextField firstNameUpdateReceptionist;
    private javax.swing.JCheckBox isVIPCheckBoxCreateRoom;
    private javax.swing.JCheckBox isVIPCheckBoxDeleteRoom;
    private javax.swing.JCheckBox isVIPCheckBoxUpdateRoom;
    private javax.swing.JButton jButtonGetPossibleRooms;
    private javax.swing.JComboBox<ComboItem> jComboBoxCustomerDeleteCustomer;
    private javax.swing.JComboBox<ComboItem> jComboBoxCustomerUpdateCustomer;
    private javax.swing.JComboBox<ComboItem> jComboBoxRecepcionistUpdate;
    private javax.swing.JComboBox<ComboItem> jComboBoxReceptionDelete;
    private javax.swing.JComboBox<ComboItem> jComboBoxReservationCreateRoom;
    private javax.swing.JComboBox<ComboItem> jComboBoxReservationDelete;
    private javax.swing.JComboBox<ComboItem> jComboBoxReservationUpdateCustomer;
    private javax.swing.JComboBox<ComboItem> jComboBoxRoomDelete;
    private javax.swing.JComboBox<ComboItem> jComboBoxRoomUpdate;
    private javax.swing.JComboBox<ComboItem> jComboBoxSelectCustomer;
    private javax.swing.JComboBox<ComboItem> jComboBoxSelectCustomerDeleteReservation;
    private javax.swing.JComboBox<ComboItem> jComboBoxSelectRoomUpdateReservation;
    private javax.swing.JComboBox<ComboItem> jComboxReservationIdUpdateReservation;
    private javax.swing.JTextField jCustomerUpdateText;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private com.toedter.calendar.JDateChooser jDateChooserBirthDayReceptionistCreateReceptionist;
    private com.toedter.calendar.JDateChooser jDateChooserCustomerBithdayCreateCutomer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JSplitPane jSplitPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTableCustomers;
    private javax.swing.JTable jTableReceptions;
    private javax.swing.JTable jTableReservation;
    private javax.swing.JTable jTableRooms;
    private javax.swing.JTextField jTextReservationDeleteCustomerId;
    private javax.swing.JTextField jTextReservationDeleteRoomId;
    private javax.swing.JPanel mainCards;
    private javax.swing.JTextField passportCreateCustomer;
    private javax.swing.JTextField passportCreateReceptionist;
    private javax.swing.JTextField passportDeleteCustomer;
    private javax.swing.JTextField passportDeleteReceptionist;
    private javax.swing.JTextField passportUpdateCustomer;
    private javax.swing.JTextField passportUpdateReceptionist;
    private javax.swing.JTextField phoneCreateCustomer;
    private javax.swing.JTextField phoneCreateReceptionist;
    private javax.swing.JTextField phoneDeleteCustomer;
    private javax.swing.JTextField phoneDeleteReceptionist;
    private javax.swing.JTextField phoneUpdateCustomer;
    private javax.swing.JTextField phoneUpdateReceptionist;
    private javax.swing.JTextField priceCreateRoom;
    private javax.swing.JTextField priceDeleteRoom;
    private javax.swing.JTextField priceUpdateRoom;
    private javax.swing.JPanel receptionCard;
    private javax.swing.JPanel receptionCards;
    private javax.swing.JButton receptionManagerButton;
    private javax.swing.JPanel reservationCard;
    private javax.swing.JPanel reservationCards;
    private javax.swing.JButton reservationManagerButton;
    private javax.swing.JPanel roomCard;
    private javax.swing.JPanel roomCards;
    private javax.swing.JButton roomManagerButton;
    private javax.swing.JTextField roomNumberCreateRoom;
    private javax.swing.JTextField roomNumberDeleteRoom;
    private javax.swing.JTextField roomNumberUpdateRoom;
    private javax.swing.JTextField secondNameCreateCustomer;
    private javax.swing.JTextField secondNameCreateReceptionist;
    private javax.swing.JTextField secondNameDeleteCustomer;
    private javax.swing.JTextField secondNameDeleteReceptionist;
    private javax.swing.JTextField secondNameUpdateCustomer;
    private javax.swing.JTextField secondNameUpdateReceptionist;
    private javax.swing.JPanel showCustomerCard;
    private javax.swing.JPanel showReceptionistCard;
    private javax.swing.JPanel showReservationCard;
    private javax.swing.JPanel showRoomCard;
    private javax.swing.JButton updateCustomerButton;
    private javax.swing.JPanel updateCustomerCard;
    private javax.swing.JButton updateReceptionistButton;
    private javax.swing.JPanel updateReceptionistCard;
    private javax.swing.JButton updateReservationButton;
    private javax.swing.JPanel updateReservationCard;
    private javax.swing.JButton updateRoomButton;
    private javax.swing.JPanel updateRoomCard;
    // End of variables declaration//GEN-END:variables

    public void sendAnswer(String answer) {
        this.setResponse(answer);
    }
}
